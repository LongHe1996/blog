<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Redis]]></title>
    <url>%2Fblog%2F2021%2F04%2F22%2Ftech%2FRedis%2F</url>
    <content type="text"><![CDATA[数据类型和底层结构 RedisDB123456789typedef struct redisDb &#123; int id; //id是数据库序号，为0-15（默认Redis有16个数据库） long avg_ttl; //存储的数据库对象的平均ttl（time to live） dict *dict; //存储数据库所有的key-value dict *expires; //存储key的过期时间 dict *blocking_keys;//blpop 存储阻塞 key 和客户端对象 dict *ready_keys;//阻塞后push 响应阻塞客户端 存储阻塞后push的key和客户端对象 dict *watched_keys;//存储watch监控的的key和客户端对象 &#125; redisDb; RedisObject12345678910typedef struct redisObject &#123; unsigned type:4;//value的类型 unsigned encoding:4;//编码 void *ptr;//指向具体的数据类型。比如：set hello world，ptr 指向包含字符串 world 的 SDS。 //... int refcount;//引用计数，refcount&gt;1时为共享对象（Redis为了节省内存，对象重复出现时，不会创建新的对象，而是引用原来的对象） //... unsigned lru:LRU_BITS; //LRU_BITS为24bit,高16位:lru,最后被访问的时间,低8位：lfu,最近访问次数 //...&#125;robj; 常见数据类型string、list（评论列表等）、set（抽奖等）、zset（各种排行榜等）、hashbigmap（用户在线状态的过）、geo（查找附近的人等）、stream 底层数据结构 SDS 基本结构：在 C 字符串的基础上加入了 free 和 len 字段。 123456//例如，字符串“hello”，len=5，free=0，buf[] : &#123;'h','e','l','l','o','\0'&#125;，struct sdshdr&#123; int len; //记录buf数组中已使用字节的数量。 int free; //记录 buf 数组中未使用字节的数量 char buf[];//字符数组，用于保存字符串,buf数组的长度=free+len+1&#125; 使用场景：string，所有的key存储等 跳跃表 基本思想：将有序链表中的部分节点分层，每一层都是一个有序链表，具有二分查找的功能。 优势：可以快速查找到需要的节点 O(logn)，实现起来比红黑树简单。 字典 基本思想：键值对，数组+链表实现。具体实现包括：字典(dict)、Hash表(dictht)、Hash表节点(dictEntry)。 1234567891011121314151617typedef struct dictht &#123; dictEntry **table; unsigned long size; unsigned long sizemask; unsigned long used; &#125; dictht;typedef struct dictEntry &#123; void *key; union &#123; void *val; uint64_t u64; int64_t s64; double d; &#125; v; struct dictEntry *next; &#125; dictEntry; 字典扩容：字典达到存储上限（阈值 0.75），需要rehash（扩容）。 rehash：将老的hash表h[0]的数据重新计算索引值后全部迁移到新的hash表h[1]中的过程。 压缩列表（ziplist） 基本思想：由一系列特殊编码的连续内存块组成的顺序型数据结构 应用场景： 直接使用：zset和hash元素个数少且是小整数或短字符串； 间接使用：list用快速链表(quicklist)数据结构存储，而快速链表是双向列表与压缩列表的组合。 整数集合(intset) 基本思想：有序的（整数升序）、存储整数的连续存储结构。 应用场景：当Redis集合类型的元素都是整数并且都处在64位有符号整数范围内（2^64），使用该结构体存储。 快速列表（quicklist） 基本思想：一个双向链表，链表中的每个节点时一个ziplist结构。quicklist中的每个节点ziplist都能够存储多个数据元素。 应用场景：list的底层实现 listpack（紧凑列表）和Rax树（基数树） 应用场景：stream的底层实现 缓存过期和淘汰策略 Redis 作为缓存使用，Key不断增加，到达物理内存之后，性能急剧下架，甚至崩溃，所以需要设置maxmemory：趋近maxmemory时，通过缓存淘汰策略，从内存中删除对象 过期策略 Redis目前采用惰性删除+主动删除（定期）的方式。 惰性删除：调用expireIfNeeded函数，该函数的意义是：读取数据之前先检查一下它有没有失效，如果失效了就删除它。 主动删除：每隔一段时间（可以配置 hz）对设置了缓存时间的key进行检测，如果可以已经失效，则从内存中删除，如果未失效，则不作任何处理。 淘汰策略（八种） 默认 No-enviction：禁止驱逐数据 LRU：RedisObject中有维护lru相关字段，在数据集中随机挑选几个键值对，取出其中 lru 最大的键值对淘汰。 volatile-lru：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰 redisDB中维护expires：维护的是一组设置了失效时间的键 ( 即key与失效时间的映射 )。 allkeys-lru：从数据集（server.db[i].dict）中挑选最近最少使用的数据淘汰，一般使用该种策略 LFU：RedisObject中维护了相关字段（lru中的某几位），如果一个数据在最近一段时间内使用次数很少，那么在将来一段时间内被使用的可能性也很小。 volatile-lfu：从已设置过期时间的数据集（server.db[i].expires）中挑选最少使用的数据淘汰 allkeys-lfu：从数据集（server.db[i].dict）中挑选最少使用的数据淘汰 Random：随机进行淘汰 volatile-random：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰 allkeys-random：从数据集（server.db[i].dict）中任意选择数据淘汰 TTl：随机挑选几个键值对，取出其中 ttl 最小的键值对淘汰 volatile-random：从过期时间的表（server.db[i].expires）中随机挑选几个键值对，取出其中 ttl 最小的键值对淘汰。 通讯协议（RESP）Redis是单进程单线程的。客户端和Redis通过 Redis序列化协议（RESP） 进行交互。该协议规定了请求响应模式，请求格式，响应格式，命令处理以及解析过程等内容。 请求响应模式 Redis协议位于TCP层之上，即客户端和Redis实例保持双工的连接。 串行的请求响应模式（ping-pong）—— telnet和redis-cli 发出的命令都属于该种模式 双工的请求响应模式（pipeline）—— 通过Jedis可以很方便的使用pipeline 原子化的批量请求响应模式（事务） 发布订阅模式(pub/sub)：哨兵模式，Redisson框架使用 脚本化的批量执行（lua） 管道（pipeline）,事务和脚本(lua)三者的区别三者都可以批量执行命令 管道无原子性，命令都是独立的，属于无状态的操作 事务和脚本是有原子性的，脚本的原子性要强于事务，脚本执行期间，另外的客户端和其它任何脚本或者命令都无法执行，所以脚本的的执行时间应该尽量短 请求数据格式（redis-cli） 间隔符号，在Linux下是\r\n，在Windows下是\n 简单字符串 Simple Strings, 以 “+”加号 开头 错误 Errors, 以”-“减号 开头 整数型 Integer， 以 “:” 冒号开头 大字符串类型 Bulk Strings, 以 “$”美元符号开头，长度限制512M 数组类型 Arrays，以 “*”星号开头 12redis&gt; SET hello world"OK" 实际发送的如下 123456789*3\r\n$3\r\nSET\r\n$5\r\nhello\r\n$5\r\nworld\r\n*3 $3 SET $5 hello $5 world 实际收到的响应数据： 1+OK\r\n 命令处理流程 redis启用，创建eventLoop（事件机制），注册时间事件处理器，注册文件事件（socket）处理器 监听 socket 建立连接 建立Client，redis-server为每个连接（socket）创建一个 Client 对象，创建文件事件监听socket，指定事件处理函数 读取socket数据到输入缓冲区，从client中读取客户端的查询缓冲区内容。 解析获取命令，将输入缓冲区中的数据解析成对应的命令，判断是单条命令还是多条命令并调用相应的解析器解析 执行命令，解析成功后调用processCommand 方法执行命令，大概分为三个部分，调用 lookupCommand 方法获得对应的 redisCommand &gt; 检测当前 Redis 是否可以执行该命令 &gt; 调用 call 方法真正执行命令 注册socket写入事件处理器，从输出缓冲区写数据到socket 关闭client 协议响应格式 状态回复，回复的第一个字节是“+”，&quot;+OK&quot; 错误回复，回复的第一个字节是“ - ”，-ERR unknown command &#39;foobar&#39; 整数回复，回复的第一个字节是“：”，&quot;:6&quot; 批量回复，回复的第一个字节是“$”，&quot;$6 foobar&quot; （字符串foobar长度为6） 多条回复（数组），回复的第一个字节是“”，`”3”` 协议解析及处理 解析命令请求参数数量：命令请求参数数量的协议格式为”*N\r\n” ,其中N就是参数数量 循环解析请求参数：首字符必须是”$”，使用”/r”定位到行尾，之间的数是参数的长度，下一个”$”之前是参数的值 hello world``` 的具体协议内容如下123456789```java*3(/r/n) //命令请求参数数量$3(/r/n) //参数1的长度set(/r/n) //参数1的值$5(/r/n) //参数2的长度hello(/r/n) //参数2的值$5(/r/n) //参数3的长度world(/r/n) //参数3的值 事件处理机制Redis服务器是典型的事件驱动系统。 Redis将事件分为两大类：文件事件和时间事件。 文件事件文件事件即Socket的读写事件，也就是IO事件，包括客户端的连接、命令请求、数据回复、连接断开等。 Redis 文件事件处理器由四个部分组成：套接字、I/O多路复用程序、文件事件分派器（dispatcher）、事件处理器。 总体流程大概是： 每当一个套接字准备好执行连接读写等操作时，就会相应产生一个文件事件 I/O多路复用器负责通过loop循环监听多个套接字，同时将一系列套接字按循序存储到一个队列中 由队列向文件事件分派器传送队列中套接字。（这个队列中套接字是有序的，它会当一个套接字事件被处理完毕后，会立马向文件事件分配器传送下一个套接字。） 文件事件分配器接受队列中的套接字并根据套接字产生的事件类型，相应调用不同的事件处理器。 套接字Socket 文件事件是对套接字操作的抽象，每当一个套接字准备好执行连接应答（accept）、写入（write）、读取（read）、关闭（close）等操作时，就会相应产生一个文件事件。 I/O多路复用程序 IO多路复用( I/O multiplexing ）指的通过单个线程管理多个Socket。 Redis事件处理机制采用单线程的Reactor模式，属于I/O多路复用的一种常见模式。 select，poll，epoll、kqueue都是IO多路复用的机制。 在这里，FD指向一个套接字 select 优点 select目前几乎在所有的平台上支持，其良好跨平台支持也是它的一个优点。 缺点 采用数组存储，单个进程打开的FD有一定限制，它由FD_SETSIZE设置，默认值是1024 另外在检查数组中是否有FD需要读写时，采用的是线性扫描的方法，即不管这些socket是不是活跃的，都轮询一遍，所以效率比较低，具有O(n)的无差别轮询复杂度，而且处理的流越多，无差别轮询时间就越长，即随着FD的增加会造成遍历速度慢的“线性下降性能问题”。 需要维护一个用来存放大量fd的数据结构，这样会使得用户空间和内核空间在传递该结构时复制开销大 poll 优点 采样链表存储，它监听的描述符数量没有限制，可以超过select默认限制的1024大小 缺点 本质上和select没有什么差别，将用户传入的数组拷贝到内核空间，然后查询每个fd对应的设备状态，采用的是线性扫描的方法，也是无差别轮询，所以效率依旧低，且随着FD的增加会造成遍历速度慢的“线性下降性能问题”。 大量的fd的数组被整体复制于用户态和内核地址空间之间，而不管这样的复制是不是有意义。 epoll（是select和poll的增强版本，事件驱动，用函数回调来实现） 缺点 所有socket都很活跃的情况下，可能会有性能问题 优点 epoll 连接数有上限，但是很大 效率提升， epoll 最大的优点就在于它只管你“活跃”的连接 ，只有活跃可用的fd才会调用callback函数；在实际的网络环境中， epoll 的效率就会远远高于 select 和 poll ，且没有随着FD的增加会造成遍历速度慢的“线性下降性能问题”。 epoll使用了共享内存，不用做内存拷贝，减少复制开销 kqueue 基本思想：注册一批socket描述符到 kqueue 以后，当其中的描述符状态发生变化时， kqueue 将一次性通知应用程序哪些描述符可读、可写或出错了。 优点：能处理大量数据，性能较高 事件处理器连接处理函数 acceptTCPHandler：当客户端向 Redis 建立 socket时，aeEventLoop 会调用 acceptTcpHandler 处理函数，服务器会为每个连接创建一个 Client 对象，并创建相应文件事件来监听socket的可读事件，并指定事件处理函数 请求处理函数 readQueryFromClient：当客户端通过 socket 发送来数据后，Redis 会调用 readQueryFromClient 方法,从 socket 中读取数据到输入缓冲区中。 命令回复处理器 sendReplyToClient：sendReplyToClient函数是Redis的命令回复处理器，这个处理器负责将服务器执行命令后得到的命令 回复通过套接字返回给客户端。 时间事件定时事件：让一段程序在指定的时间之后执行一次，达到后删除，之后不会再重复。 周期事件：让一段程序每隔指定时间就执行一次，之后看情况重复 一个时间事件主要由以下三个属性组成： id(全局唯一id) when (毫秒时间戳，记录了时间事件的到达时间) timeProc（时间事件处理器，当时间到达时，Redis就会调用相应的处理器来处理事件） serverCron（典型周期事件） 时间事件的最主要的应用是在redis服务器需要对自身的资源与配置进行定期的调整，从而确保服务器的长久运行，这些操作由redis.c中的serverCron函数实现。 redis服务器开启后，就会周期性执行此函数，直到redis服务器关闭为止。默认每秒执行10次，平 均100毫秒执行一次，可以在redis配置文件的 hz 选项，调整该函数每秒执行的次数。 主要用于以下操作： 更新redis服务器各类统计信息，包括时间、内存占用、数据库占用等情况。 清理数据库中的过期键值对。 关闭和清理连接失败的客户端。 尝试进行aof和rdb持久化操作。 如果服务器是主服务器，会定期将数据向从服务器做同步操作。 如果处于集群模式，对集群定期进行同步与连接测试操作。 持久化操作 Redis是内存数据库，宕机后数据会消失，重启后需要快速恢复数据，因此需要持久化机制来用于恢复数据。 Redis提供两种持久化方式：RDB和AOF Redis持久化不保证数据的完整性。 RDBRDB（Redis DataBase），是redis默认的存储方式，RDB方式是通过快照（ snapshotting ）完成 的。 触发快照的方式 自定义策略 redis.conf中配置，如，save 900 1，表示15分钟（900秒钟）内至少1个键被更改则进行快照 可以配置多条，用漏斗模型配置 12345save 900 1 # 表示15分钟（900秒钟）内至少1个键被更改则进行快照。 save 300 10 # 表示5分钟（300秒）内至少10个键被更改则进行快照。 save 60 10000 # 表示1分钟内至少10000个键被更改则进行快照。 命令显式触发 执行save或者bgsave命令 12127.0.0.1:6379&gt; bgsaveBackground saving started RDB流程 触发RDB后父进程首先判断现在有在执行Save或者类似的操作吗，正在进行则直接返回 父进程进行fork，创建子进程，fork期间父进程阻塞，不能执行来自客户端的任何命令。 父进程fork完后，命令返回开始saving的提示信息，比如 background saving started，父进程不再阻塞，接下来交给子进程 子进程根据父进程的内存快照创建临时RDB文件，文件创建完整后，替换原有RDB文件，这意味着过程中RDB文件始终保持完整 子进程发送信号给父进程，父进程更新统计信息。 RDB优点 RDB是二进制压缩文件，占用空间小，便于传输（传给slaver） 主进程fork子进程，可以最大化Redis性能 RDB缺点 主进程太大的话fork过程中主进程阻塞时间会比较久 不保证数据完整性，宕机的话，会丢失最后一次快照以后更改的所有数据 AOF Redis默认情况下不开启。 开启AOF持久化后 Redis 将所有对数据库进行过写入的命令（及其参数）（RESP）记录到 AOF 文件， 以此达到记录数据库状态的目的， 这样当Redis重启后只要按顺序回放这些命令就会恢复到原始状态了。 AOF流程 命令传播：Redis 将执行完的命令、命令的参数、命令的参数个数等信息发送到 AOF 程序中。 缓存追加：AOF 程序根据接收到的命令数据，将命令转换为通讯协议RESP的格式，然后将协议内容追加到服务器的 AOF 缓存中。 文件写入和保存：（WRITE）AOF 缓存中的内容被写入到 AOF 文件末尾，如果设定的 AOF 保存条件被满足的话，（SAVE） fsync 函数或者 fdatasync 函数会被调用，将写入的内容真正地保存到磁盘中。 AOF保存模式以下两种保存模式在文件写入时都会阻塞主进程，但模式1在文件保存时不会阻塞 AOF_FSYNC_EVERYSEC ：每一秒钟保存一次。（默认，文件写入时阻塞，保存时不阻塞，丢失1-2秒的数据） AOF_FSYNC_ALWAYS ：每执行一个命令保存一次。（不推荐，文件写入时阻塞，保存时阻塞，最多只丢失一个命定的数据） AOF 瘦身（BGREWRITEAOF）因为AOF记录整个命令过程，文件将越来越大，而且中间很多操作时对结果无影响的，需要进行瘦身，使其更轻便地针对当前数据库的数据。 触发方式 自定义策略，在redis.conf中配置 命令显式触发，执行bgrewriteaof命令 瘦身过程（整个瘦身过程安全）： 父进程将AOF瘦身（重写）交给fork出的子进程处理，避免了阻塞 子进程创建完成后，开启AOF 重写缓存 子进程不需要对原有的 AOF 文件进行任何写入和读取， 它针对的是数据库中键的当前值生成新的AOF文件 在子进程创建新的AOF文件期间，父进程保持如下操作 处理命令请求，并按原流程将相关内容写入现有AOF文件中 同时将写命令追加到 AOF 重写缓存中 子进程完成新的AOF文件的创建，向父进程发送信号，父进程调用处理函数完成以下内容，此时父进程阻塞 将 AOF 重写缓存中的内容全部写入到新 AOF 文件中 新 AOF 文件替换原有的 AOF 文件 AOF文件的载入与数据还原（伪客户端）混合持久化 Redis 4.0 开始支持 rdb 和 aof 的混合持久化。 混合持久化打开，aof rewrite 的时候就直接把 rdb 的内容写到 aof 文件开头，RDB的头+AOF的身体 &gt; appendonly.aof 在加载时，首先会识别AOF文件是否以REDIS字符串开头，如果是就按RDB格式加载，加载完RDB后继续按AOF格式加载剩余部分。 RDB 和 AOF 的区别 性质和文件大小 RDB 记录的是某个时期的快照，采用二进制压缩存储，文件小，便于存储和传输，性能高 AOF 记录的是操作命令，采用文本存储(混合)，文件相对来说比较庞大，性能低 数据安全 RDB在配置触发状态会丢失最后一次快照以后更改的所有数据 AOF设置为每秒保存一次，则最多丢2秒的数据 对过期 Key 不同的处理 Redis以主服务器模式运行，RDB不会保存过期键值对数据，Redis以从服务器模式运行，RDB会保存过期键值对，主从同步时，再清空过期键值对。 AOF写入文件时，对过期的key会追加一条del命令，当执行AOF重写时，会忽略过期key和del命令。 Redis事务 Redis的事务是通过multi、exec、discard和watch这四个命令来完成的。 Redis的单个命令都是原子性的，所以这里需要确保事务性的对象是命令集合。 Redis将命令集合序列化并确保处于同一事务的命令集合连续且不被打断的执行。 Redis不支持回滚操作。 事务命令 multi：用于标记事务块的开始,Redis会将后续的命令逐个放入队列中，然后使用exec原子化地执行这个命令队列 exec：执行命令队列 discard：清除命令队列 watch：监视key （redisDb有一个watched_keys，key是某个被监视的数据的key，值是一个链表，记录了所有监视这个数据的客户端） unwatch：清除监视key 事务状态redis的客户端中有属性flags用于表示事务状态 ﬂags=REDIS_MULTI，表示正在事务中 ﬂags=REDIS_DIRTY_EXEC，表示某条命令在入队过程中发生错误 flags=REDIS_DIRTY_CAS，表示该客户端watch的数据发生了改动，服务端收到客户端的EXEC命令时会查看该客户端的flags，如为REDIS_DIRTY_CAS，则 清空事务队列。 Redis的弱事务性 redis 发生语法错误，整个事务的命令在队列里都清除，ﬂags=multi_dirty redis 发生运行错误，在队列里其他正确的命令可以执行 （弱事务性），且不支持回滚。 Redis不支持事务回滚（为什么呢） 1、大多数事务失败是因为语法错误或者类型错误（是运行时的错误），这两种错误，在开发阶段都是可以预见的 2、Redis为了性能方面就忽略了事务回滚。 （回滚需要记录历史版本） 高可用方案（粗写）单进程+单线程 + 多机 （集群）来保证Redis的高可用性（AP） 主从一主多从，主从同步，主负责写，从负责读，提升Redis的性能和吞吐量 默认情况下主机宕机后，从机不可为主机（利用哨兵可以实现主从切换，做到高可用） 主从复制过程 保存主节点信息 客户端向 从服务器 发送 replicaof 主机地址（127.0.0.1） 端口（6379）时：从服务器 将 主机 ip和端口保存到 redisServer 的 masterhost 和 masterport 中。 从服务器将向发送 replicaof 命令的客户端返回OK，表示复制指令已经被接收，之后进行复制操作。 建立socket连接 从服务器 与 主服务器 建立socket 连接，socket触发联文件事件处理器，接收RDB文件（全量复制）、接收主服务器传播来的写命令（增量复制） 断线重连有可能触发全量同步也有可能是增量同步（ master 判断 runid 是否一致）。 全量复制 同步快照：RDB文件从主到从，从服务器解析并载入，这段时间主服务器将新增命令存储到缓冲区 同步写缓冲：缓冲区写命令从主到从 同步增量：同步写操作 增量复制 全量复制完成后，新命令开始都主从同步 一般一条命令一同步 心跳检测机制在命令传播阶段，从服务器默认会以每秒一次的频率向主服务器发送命令，获得当前的复制偏移量。作用 检测主从连接状态 辅助防止不安全的情况下的命令传播（min-slaves + lag） 检测命令丢失，用偏移量来判断 哨兵（sentinel）哨兵（sentinel）是一个特殊的 Redis 服务器，实现Redis的高可用性（High Availability）的解决方案： 由一个或多个 sentinel 实例组成 sentinel 集群可以监视一个或多个主服务器和多个从服务器。 当主服务器进入下线状态时，sentinel 可以将该主服务器下的某一从服务器升级为主服务器完成故障转移，继续提供服务，从而保证 redis 的高可用性。 哨兵的特点 Sentinel 是一个特殊的Redis服务器，不会进行持久化 Sentinel 实例启动后，每个 Sentinel 会创建2个连向主服务器的网络连接 命令连接：用于向主服务器发送命令，并接收响应； 订阅连接：用于订阅主服务器的频道 哨兵作用流程 哨兵和主服务器：Sentinel默认每10s一次，向被监控的主服务器发送info命令，获取主服务器和其下属从服务器的信息。 哨兵和新的从服务器 ：当Sentinel发现主服务器有新的从服务器出现时，Sentinel还会向从服务器建立命令连接和订阅连接。在命令连接建立之后，Sentinel还是默认10s一次，向从服务器发送info命令，并记录从服务器的信息。 哨兵日常消息：Sentinel每2s一次，向所有被监视的主服务器和从服务器所订阅的频道上发送消息，消息中会携带Sentinel自身的信息和主服务器的信息。 哨兵之间：Sentinel 彼此之间只创建命令连接，而不创建订阅连接，因为 Sentinel 通过订阅主服务器或从服务器， 就可以感知到新的Sentinel的加入，而一旦新Sentinel加入后，相互感知的Sentinel通过命令连接来通信 就可以了。 判断主服务器下线：Sentinel每秒一次向所有与它建立了命令连接的实例(主服务器、从服务器和其他Sentinel)发送PING命令，如收到无效回复或者超时，则该Sentinel主观认为该实例下线（SDown）。一旦一个主服务器被一个Sentinel主观认为下线之后，Sentinel就会向所有监控这个主服务器的所有其他Sentinel发送查询命令，判断它们是否也认为主服务器下线。如果达到Sentinel配置中的quorum数量的Sentinel实例都判断主服务器为主观下线，则该主服务器就会被判定为客观下线(ODown)。 哨兵leader选举：当主服务器被认为是客观下线之后，所有Sentinel就会通过选举算法raft，选出一个leader哨兵执行 failover（故障转移）操作。其他Sentinel等待Leader完成 从转主 后，检测到新的主服务器正常工作，就会去掉客观下线的标识。 raft算法 raft下的节点状态：Leader, Follower, Candidate raft下特殊机制：term，即任期。 raft选举流程： 开始时所有节点都是follower，term=0。 如果节点收到了RequestVote或者AppendEntries，就会保持自己的Follower身份，如果一段时间内没收到 AppendEntries 消息，就会转换成Candidate，自己开始竞选Leader。 此时该节点使自己的term+1，启动一个新的定时器，并且向所有其他节点发送RequestVote，并等待其他节点的回复。 如果在定时器超时前，节点收到多数节点的同意投票，就转换成Leader。同时向所有其他节点发送 AppendEntries，告知自己成为了Leader。 TIPS：每个节点在一个term内只能投一票，采取先到先得的策略，Follower会投给第一个收到RequestVote的节点，Candidate投给自己。 故障转移当选举出Leader Sentinel后，Leader Sentinel会对下线的主服务器执行故障转移操作，主要有三个步骤： 选一个Slave升Master，并通知其他Slave 在客户端试图连接失效的 Master 时，向客户端返回新 Master 的地址，保证替换。 主从交替后，各服务器配置文件内容改变， sentinel.conf 的监控目标会随之调换。 选择新主 过滤掉主观下线的节点 选择slave-priority最高的节点，如果有则返回没有就继续选择 选择出复制偏移量最大的节点，因为复制偏移量越大则数据复制的越完整，如果有就返回了，没有就继续 选择run_id最小的节点，因为run_id越小说明重启次数越少 其他client 分区、redis官方cluster、proxy端分区等（TODO） 一致性hash基本思想：普通hash是对主机数量取模，而一致性hash是对2^32（4 294 967 296）取模，并将其看作一个Hash环。服务器和数据计算后都分布在圆环上，数据顺时针并入第一个遇到的服务器中。 环偏移现象：简而言之就是服务器过于集中在一处，可以增加虚拟节点使均匀分布 优点：增加或删除节点只需要做部分数据迁移。 分布式锁watch利用Watch，基于CAS，实现乐观锁 利用redis的watch功能，监控这个redisKey的状态值 获取redisKey的值 创建redis事务 给这个key的值+1 然后去执行这个事务，如果key的值被修改过则回滚，key不加1 setnxRedission分布式锁缓存问题缓存穿透缓存穿透是指在高并发下查询key不存在的数据，会穿过缓存查询数据库。导致数据库压力过大而宕机 解决方案： 对查询结果为空的情况也进行缓存，问题就是缓存太多空值占用了更多的空间 使用布隆过滤器。在缓存之前在加一层布隆过滤器，在查询的时候先去布隆过滤器查询 key 是否存在，如果不存在就直接返回，存在再查缓存和DB。 缓存击穿缓存在某个时间点过期的时候，恰好在这个时间点对这个Key有大量的并发请求过来，这些请求发现缓 存过期一般都会从后端DB加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端DB压垮。 解决方案： 用分布式锁控制访问的线程，使用redis的setnx互斥锁先进行判断，这样其他线程就处于等待状态，保证不会有大并发操作去操作数 据库。 不设超时时间等，但会造成写一致问题，当数据库数据发生更新时，缓存中的数据不会及时更新，这样会造成数据库中的数据与缓存中的数据的不一致，应用会从缓存中读取到脏数据。 延时双删延时双删用于保证数据的最终一致性， 先更新数据库同时删除缓存项(key)，等读的时候再填充缓存 2秒后再删除一次缓存项(key) 设置缓存过期时间 Expired Time 比如 10秒 或1小时 将缓存删除失败记录到日志中，利用脚本提取失败记录再次删除（缓存失效期过长 7*24） 升级方案：通过数据库的binlog来异步淘汰key，利用工具(canal)将binlog日志采集发送到MQ中，然后通过ACK机制确认处理删除缓存。 缓存雪崩当缓存服务器重启或者大量缓存集中在某一个时间段失效，这样在失效的时候，也会给后端系统(比如 DB)带来很大压力。 解决方案： key的失效期分散开，不同的key设置不同的有效期 配置高可用（脏读） 设置二级缓存（数据不一定一致） 数据并发竞争这里的并发指的是多个redis的client同时set 同一个key引起的并发问题。 多客户端（Jedis）同时并发写一个key，一个key的值是1，本来按顺序修改为2,3,4，最后是4，但是顺 序变成了4,3,2，最后变成了2。 解决方案：分布式锁（redis 用 setnx 实现分布式锁） + 时间戳 准备一个分布式锁，大家去抢锁，抢到锁就做set操作。 保存一个时间戳判断set顺序，以抢到的客户端的时间为准，比它早的都不执行了，比它晚的顺序执行 Hot Key当有大量的请求(几十万)访问某个Redis某个key时，比如微博-爆，由于流量集中达到网络上限，从而导致这个redis的 服务器宕机。造成缓存击穿，接下来对这个key的访问将直接访问数据库造成数据库崩溃，或者访问数 据库回填Redis再访问Redis，继续崩溃。 如何处理： 在每个Redis主节点上备份热key数据，这样在读取时可以采用随机读取的方式，将访问压力负载到 每个Redis上。 利用对热点数据访问的限流熔断保护措施 Big Key大key指的是存储的值（Value）非常大，会大量占用内存，且在集群中无法均衡，导致Redis的性能下降、主从复制异常，此外，在主动删除或过期删除时会操作时间过长而引起服务阻塞。 发现：redis-cli –bigkeys 命令**。可以找到某个实例5种数据类型(String、hash、list、set、zset)的最大 key。 处理： 优化big key的原则就是string减少字符串长度，list、hash、set、zset等减少成员数。 单个简单的key存储的value很大，可以尝试将对象分拆成几个key-value， 使用mget获取值，这样 分拆的意义在于分拆单次操作的压力，将操作压力平摊到多次操作中，降低对redis的IO影响。 删除大key时不要使用del,因为del是阻塞命令，删除时会影响性能。使用lazy delete (unlink命令) 其他 Redis也有慢查询日志，可用于监视和优化查询，使用列表存储慢查询日志，采用队列方式（FIFO） 其他的监控平台有Prometheus等]]></content>
      <tags>
        <tag>迅速拾起技能大作战</tag>
        <tag>知识整理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JVM虚拟机的内存管理]]></title>
    <url>%2Fblog%2F2021%2F04%2F13%2Ftech%2FJVM%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%2F</url>
    <content type="text"><![CDATA[程序计数器（Program Counter Register）程序计数器占用一块较小的内存空间，它可以看做是当前线程所执行的字节码的行号指示器。在虚拟机的概念模型里，字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。 注意点 程序计数器是线程私有的，它的生命周期与线程相同，每个线程都有一个。 当虚拟机正在执行的方法是一个本地（ native ）方法的时候，jvm 的 pc 寄存器存储的值是 undefined 此内存区域是唯一一个在 Java 虚拟机规范中没有规定任何 OutOfMemoryError 情况的区域 虚拟机栈（Java Virtual Machine Stacks）Java虚拟机栈用于存储栈帧，每个方法在执行时都会创建一个栈帧(Stack Frame)， 用于存储局部变量表、操作数栈、动态链接、方法出口等信息。每一个方法从调用直到执行完成的过程就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。 相关概念 栈帧（stack frame）：用于支持虚拟机进行方法调用和方法执行的数据结构。栈帧存储了方法的局部变量表、操作数栈、动态连接和方法返回地址等信息。 局部变量表（Local Variable Table）：一组变量值存储空间，用于存放方法参数和方法内定义的局部变量。包括8种基本数据类型、对象引用（reference类型）和returnAddress类型（指向一条字节码指令的地址） 操作数栈（Operand Stack）：随着方法执行和字节码指令的执行，会从局部变量表或对象实例的字段中复制常量或变量写入到操作数栈，再随着计算的进行将栈中元素出栈到局部变量表或者返回给方法调用者。 动态链接（Dynamic Linking）：每个栈帧都包含一个指向运行时常量池中所属方法的符号引用，持有这个引用的目的是为了支持方法调用过程中的动态链接(Dynamic Linking)，动态链接的作用就是将符号引用转换成直接引用。 方法返回地址：方法返回地址存放调用该方法的PC寄存器的值。正常退出时，根据PC寄存器的值来返回到调用他的地方；异常退出的，返回地址是要通过异常表来确定，栈帧中一般不会保存这部分信息。 注意点 虚拟机栈是线程私有的，它和线程同时创建，其生命周期和线程相同。 虚拟机栈需要使用连续的内存空间 分配虚拟机栈大小：-Xss （例：-Xss1m），为jvm启动的每个线程分配内存大小，默认JDK1.4中是256K，JDK1.5+中是1M 相关异常 StackOverFlowError ：线程请求的栈深度 &gt; 所允许的深度 OutOfMemoryError ：虚拟机栈扩展时无法申请到足够的内存 本地方法栈（Native Method Stacks）本地方法栈（Native Method Stacks） 与虚拟机栈所发挥的作用是非常相似的， 其区别只是虚拟机栈为虚拟机执行 Java方法（也就是字节码） 服务， 而本地方法栈则是为虚拟机使用到的本地（Native） 方法服务。 注意点 本地方法栈是线程私有的，它和线程同时创建，其生命周期和线程相同。 相关异常 StackOverFlowError ：线程请求的栈深度 &gt; 所允许的深度 OutOfMemoryError ：本地方法栈扩展时无法申请到足够的内存 堆（Java Heap）Java堆（Java Heap）的唯一目的就是存放对象实例以及数组， Java 世界里大部分对象实例都在这里分配内存，另有小部分由于即时编译等技术的进步，让这件事情变得不绝对。此外，堆中也包含私有的线程缓冲区 Thread Local Allocation Buffer (TLAB)。 相关概念 青年代Young Generation：年轻代主要存放新创建的对象，内存大小相对会比较小，垃圾回收会比较频繁。年轻代分 成1个Eden Space和2个Suvivor Space（from 和to），Eden空间和另外两个Survivor空间占比分别为8:1:1。 老年代Old Generation ：年老代主要存放JVM认为生命周期比较长的对象（经过几次的Young Gen的垃圾回收后年龄到达阈值），内存大小相对会比较大，垃圾回收也相对没有那么频繁，新生代 ( Young ) 与老年代 ( Old ) 的默认比例的值为 1:2。 永久代Permanent Generation：（JAVA7的概念，在Java8以后，由于方法区的内存不在分配在Java堆上，而是存储于本地内存元空间Metaspace中，所以永久代就不存在了。 对象的分配 new的对象先放在伊甸园区。该区域有大小限制 当伊甸园区域填满时，程序又需要创建对象，JVM的垃圾回收器将对伊甸园预期进行垃圾回收（Minor GC）,将伊 甸园区域中不再被其他对象引用的额对象进行销毁，再加载新的对象放到伊甸园区 然后将伊甸园区中的剩余对象移动到幸存者0区 如果再次触发垃圾回收，此时上次幸存下来的放在幸存者0区的，如果没有回收，就会放到幸存者1区 如果再次经历垃圾回收，此时会重新返回幸存者0区，接着再去幸存者1区。 如果累计次数到达默认的15次，这会进入养老区。可以通过设置参数，调整阈值 -XX:MaxTenuringThreshold=N 养老区内存不足是,会再次出发GC，首先，会尝试触发MinorGC. 如果空间还是不足,则触发 Major GC 进行养老区的内存清理，Major GC的速度比Minor GC慢10倍以上。 如果养老区执行了Major GC后仍然没有办法进行对象的保存,就会报OOM异常. 堆GCJava 中的堆也是 GC 收集垃圾的主要区域。 GC 分为两种：一种是部分收集器（Partial GC）另一类是整堆收集器 （Fu’ll GC） 部分收集器: 不是完整收集java堆的的收集器,它又分为: 新生代收集（Minor GC / Young GC）: 只是新生代的垃圾收集，Eden代满会触发，Survivor满不会引发GC。YGC会引发STW(stop the world) ，暂停其他用户的线程，等垃圾回收结束，用户的线程才恢复。 老年代收集 （Major GC / Old GC）: 只是老年代的垃圾收集 (CMS GC 单独回收老年代)。 混合收集（Mixed GC）:收集整个新生代及老年代的垃圾收集 (G1 GC会混合回收, region区域回收) 整堆收集（Full GC）:收集整个java堆和方法区的垃圾收集器，调用System.gc() 可以触发, 不是立即执行，老年代空间不足、方法区空间不足、通过Minor GC进入老年代平均大小大于老年代可用内存等情况都会出发。 注意点 堆是Java虚拟机所管理的内存中最大的一块。 堆是jvm所有线程共享的，在虚拟机启动的时候创建。 Java堆是垃圾收集器管理的主要区域，从内存回收的角度来看，由于现在收集器基本都采用分代收集算法，所以Java堆还可以细分为：新生代和老年代，新生代又可以分为：Eden 空间、From Survivor空间、To Survivor空间。 分配堆内存大小：通过-Xms和-Xmx控制，当下Java应用最大可用内存为20M， 最小内存为5M，堆大小 = 新生代 + 老年代。 分配新生代和老年代的内存比例：-XX:NewRatio=2 , 标识新生代占1 , 老年代占2 ,新生代占整个堆的1/3 分配 Eden 空间和 Survivor 空间：–XX:SurvivorRatio 来设定 相关异常 OutOfMemoryError ：堆扩展时无法申请到足够的内存 元空间（MetaSpace）在JDK1.7之前，HotSpot 虚拟机把方法区当成永久代来进行垃圾回收。从 JDK 1.8 开始，移除永久代，并把方法区移至元空间，它位于本地内存中，而不是虚拟机内存中。HotSpots取消了永久代，那么是不是也就没有方法区了 呢？当然不是，方法区是一个规范，规范没变，它就一直在，只不过取代永久代的是元空间（Metaspace）而已。 永久代与元空间的不同 存储位置不同：永久代在物理上是堆的一部分，和新生代、老年代的地址是连续的，而元空间属于本地内存。 存储内容不同：在原来的永久代划分中，永久代用来存放类的元数据信息、静态变量以及常量池等。 现在类的元信息存储在元空间中，静态变量和常量池等并入堆中，相当于原来的永久代中的数据，被元空间和堆内存给瓜分了。 为什么要废弃永久代，引入元空间？ 原因 在原来的永久代划分中，永久代需要存放类的元数据、静态变量和常量等。 它的大小不容易确定，因为这其中有很多影响因素，比如类的总数，常量池的大小和方法数量等，-XX:MaxPermSize 指定太小很容易造成永久代内存溢出。 移除永久代是为融合HotSpot VM与 JRockit VM而做出的努力，因为JRockit没有永久代，不需要配置永久代 永久代会为GC带来不必要的复杂度，并且回收效率偏低。 好处 将运行时常量池从PermGen分离出来，与类的元数据分开，提升类元数据的独立性，提升对元数据的管理同时提升GC效率。 由于类的元数据分配在本地内存中，元空间的最大可分配空间就是系统可用内存空间。不会遇到永久代存在时的内存溢出错误。 参数配置 -XX:MetaspaceSize，初始空间大小，达到该值就会触发垃圾收集进行类型卸载。同时GC会对该值进行调整：如果释放了大量的空间，就适当降低该值；如果释放了很少的空间则适当提高（不超过 MaxMetaspaceSize ）。 -XX:MaxMetaspaceSize，最大空间，默认是没有限制的。如果没有使用该参数来设置类的元数据的大小， 其最大可利用空间是整个系统内存的可用空间。JVM也可以增加本地内存空间来满足类元数据信息的存储。 但是如果没有设置最大值，则可能存在bug导致Metaspace的空间在不停的扩展，会导致机器的内存不足；进而可能出现swap内存被耗尽；最终导致进程直接被系统直接kill掉。 如果设置了该参数，当Metaspace剩余空间不足，会抛出异常。 -XX:MinMetaspaceFreeRatio，在GC之后，最小的Metaspace剩余空间容量的百分比，减少为分配空间所导致的垃圾收集。 -XX:MaxMetaspaceFreeRatio，在GC之后，最大的Metaspace剩余空间容量的百分比，减少为释放空间所导致的垃圾收集。 相关异常 OutOfMemoryError ：设置了元空间的最大空间，Metaspace剩余空间不足时抛出。 方法区（Method Area）方法区（Method Area） 与Java堆一样， 是各个线程共享的内存区域。方法区中包括类型信息（类信息、域信息、方法信息） 、运行时常量池（运行时常量池、即时编译（JIT）器编译后的代码缓存等数据） 相关概念 类型信息 对每个加载的类型（类Class、接口 interface、枚举enum、注解 annotation），JVM必须在方法区中存储以下类型信息 这个类型的完整有效名称（全名 = 包名.类名） 这个类型直接父类的完整有效名（对于 interface或是java.lang. Object，都没有父类） 这个类型的修饰符（ public, abstract，final的某个子集） 这个类型直接接口的一个有序列表 域信息 域信息，即为类的属性，成员变量 JVM必须在方法区中保存类所有的成员变量相关信息及声明顺序。 域信息 域名称 域类型 域修饰符（pυblic、private、protected、static、final、volatile、transient的 某个子集） 方法 JVM必须保存所有方法的以下信息，同域信息一样包括声明顺序： 方法名称方法的返回类型（或void） 方法参数的数量和类型（按顺序） 方法的修饰符public、private、protected、static、final、synchronized、native,、abstract的一个子集 方法的字节码bytecodes、操作数栈、局部变量表及大小（ abstract和native方法除外） 异常表（ abstract和 native方法除外）。每个异常处理的开始位置、结束位置、代码处理在程序计数器中的偏 移地址、被捕获的异常类的常量池索引 常量池 VS 运行时常量池 常量池：存放编译期间生成的各种字面量与符号引用；字节码文件中，内部包含了常量池 一个有效的字节码文件中除了包含类的版本信息、字段、方法以及接口等描述信息外，还包含一项信息那就是常量池表（ Constant pool table），包括各种字面量和对类型、域和方法的符号引用。 常量池，可以看做是一张表，虚拟机指令根据这张常量表找到要执行的类名、方法名、参数类型、字面量等类型。 运行时常量池：常量池表在运行时的表现形式；方法区中，内部包含了运行时常量池 两者关系：编译后的字节码文件中包含了类型信息、域信息、方法信息等。通过 ClassLoader 将字节码文件的常量池中的信息加载到内存中，存储在了方法区的运行时常量池中。 直接内存（Direct Memory） 直接内存（Direct Memory） 并不是虚拟机运行时数据区的一部分。 在JDK 1.4中新加入了NIO（New Input/Output） 类， 引入了一种基于通道（Channel） 与缓冲区 （Buffer） 的I/O方 式，它可以使用Native函数库直接分配堆外内存， 然后通过一个存储在Java堆里面的 DirectByteBuffer 对象作为这块 内存的引用进行操作。 这样能在一些场景中显著提高性能， 因为避免了 在Java堆和Native堆中来回复制数据。DirectBuffer直接分配在物理内存中，并不占用堆空间。在访问普通的ByteBuffer时，系统总是会使用一个“内核缓冲区”进行操作。 而DirectBuffer所处的位置，就相当于这个“内核缓冲区”。因此，使用DirectBuffer是一种更加接近内存底层的方法， 所以它的速度比普通的ByteBuffer更快。 通过使用堆外内存，可以带来以下好处： 改善堆过大时垃圾回收的效率，减少STW。Full GC时会扫描堆内存，回收效率和堆大小成正比。Native的内存，由OS负责管理和回收。 减少内存在Native堆和JVM堆拷贝过程，避免拷贝损耗，降低内存使用。 可突破JVM内存大小限制。 注意点 直接内存（Direct Memory） 的容量大小可通过-XX： MaxDirectMemorySize 参数来指定， 如果不去指定， 则默认与 Java堆最大值（由-Xmx指定） 一致， 因为虽然使用 DirectByteBuffer 分配内存也会抛出内存溢出异常， 但它抛出异常时并没有真正向操作系统申请分配内存， 而是通过计算得知内存无法分配就会在代码里手动抛出溢出异常， 真正申请分配内存的方法是Unsafe::allocateMemory() 由直接内存导致的内存溢出， 一个明显的特征是在Heap Dump文件中不会看见有什么明显的异常情况， 如果发现内存溢出之后产生的Dump文件很小， 而程序中又直接或间接使用了 DirectMemory（典型的间接使用就是NIO） ， 那就可以考虑重点检查一下直接内存方面的原因。]]></content>
      <tags>
        <tag>迅速拾起技能大作战</tag>
        <tag>知识整理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mybatis 原理梳理即源码分析]]></title>
    <url>%2Fblog%2F2021%2F04%2F11%2Ftech%2FMybatis%20%E5%8E%9F%E7%90%86%E6%A2%B3%E7%90%86%E5%8D%B3%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%2F</url>
    <content type="text"><![CDATA[Mybatis 基础 Mybatis 缓存 Mybatis 插件 Mybatis 架构原理架构Mybatis 架构由接口层、数据处理层、框架支撑层组成： 接口层提供增删改查以及配置信息维护的接口，提供两种调用方法：1.基于StatementID 2.基于Mapper接口。 数据处理层负责具体的参数映射（ ParameterHandler ）、SQL 解析（ SqlSource ）、SQL 执行（ Excutor ）、结果集映射处理（ ResultSetHandler ）。 框架支撑曾提供最基础的功能支撑，包括连接管理、事务管理、配置加载、缓存管理等组件。 主要构件及层次结构主要构件 构件 描述 SqlSession 作为 MyBatis ⼯作的主要顶层 API，表示和数据库交互的会话，完成数据库增删改查功能 Executor MyBatis 执⾏器，是 MyBatis 调度的核⼼，负责 SQL 语句的⽣成和 查询缓存 的维护 StatementHandler 封装了JDBC Statement操作，如设置参数、将 Statement 结果集转换成List集合等。 ParameterHandler 参数映射处理，负责将⽤户传递的参数转换成 JDBC Statement 所需要的参数 ResultSetHandler 结果集映射处理，负责将 JDBC 返回的 ResultSet 结果集对象转换成 List 类型的集合 TypeHandler 负责java数据类型和jdbc数据类型之间的映射和转换 MappedStatement MappedStatement维护了⼀条SQL信息封装 SqlSource 负责根据⽤户传递的 parameterObject，动态地⽣成SQL语句，将信息封装到 BoundSql 对象中 BoundSql 表示动态⽣成的SQL语句以及相应的参数信息 层次结构123456789-&gt; SqlSession -&gt; SqlSession -&gt; Excutor -&gt; Excutor -&gt; StatememtHandler -&gt; StatememtHandler -&gt; ParameterHandler -&gt; ResultSetHandler -&gt; TypeHandler Mybatis 延迟加载]]></content>
      <tags>
        <tag>迅速拾起技能大作战</tag>
        <tag>知识整理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[算法（Algorithm）整理回顾]]></title>
    <url>%2Fblog%2F2021%2F04%2F08%2Ftech%2F%E7%AE%97%E6%B3%95%E6%95%B4%E7%90%86%E5%9B%9E%E9%A1%BE%2F</url>
    <content type="text"><![CDATA[算法复杂度时间复杂度 大O复杂度表示法 T(n) 代码执行时间 n 数据规模，当n无限大时，低阶、常量、系统都可以忽略 f(n) 每行代码执行次数总和 O 代码的执行时间与f(n)表达式成正比 例如下述代码，T(n)=O(n*n) 123456789101112int sum(int n)&#123; int s=0;//1 int i=1;//1 int j=1;//1 for(;i&lt;=n;i++)&#123;//n j=1;//n for(;j&lt;=n;j++)&#123;//n*n s=s+i+j;//n*n &#125; &#125; return s;//1&#125; 常见算法复杂度 O(1) 不是只执行了一行代码，只要代码的执行不随着数据规模(n)的增加而增加，就是常量级 在实际应用中，通常使用冗余字段存储来将O(n)变成O(1)，比如Redis中有很多这样的操作用来提升访问性能：比如:SDS、字典、跳跃表等 O(logn)、O(nlogn)： 比如快速排序、归并排序的时间复杂度都是O(nlogn) O(n) 很多线性表的操作都是O(n)，这也是最常见的一个时间复杂度，比如：数组的插入删除、链表的遍历等 O(m+n) m和n是代码的两个数据规模，而且不能确定谁更大，此时代码的复杂度为两段时间复杂度之和。 空间复杂度由于现在硬件相对比较便宜，所以在开发中常常会利用空间来换时间，比如缓存技术典型的数据结构中空间换时间是：跳跃表在实际开发中我们也更关注代码的时间复杂度，而用于执行效率的提升 常见算法递归 概念：一种循环，而且在循环中执行的就是调用自己递归调用将每次返回的结果存在栈帧中，其内容三要素包括递归结束条件、函数的功能、函数的等价关系式，即递归公式。 应用：斐波那契数列（普通递归解法为O(2^n) ） 优点：代码简单 缺点：1.占用空间较大；2.如果递归太深，可能会发生栈溢出；3.可能会有重复计算（通过备忘录或递归的方式去优化-动态规划） 二分查找 概念：二分查找（Binary Search）算法，也叫折半查找算法，是针对有序数据集合的查找算法。 经典题型：一个有序的数组中查找某个数字是否存在；一个有序数组有一个数出现1次，其他数出现2次，找出出现一次的数；快速定位出一个 IP 地址的归属地 优点：1.速度快，时间复杂度为O(logn)，每次都能排除剩余元素中一半的元素，包含目标元素的有效范围就收缩得很快；2.不占空间；3.不开辟新空间 缺点：必须是有序的数组（数据量太小没有意义，但数据量也不能太大，因为数组要占用连续的空间） 排序冒泡排序 时间复杂度：O(n^2) 实现 123456789101112131415161718192021222324252627282930313233343536public class BubbleSort &#123; public static void main(String[] args) &#123; int[] array = new int[]&#123;3, 8, 11, 13, 9, 2, 1, 4, 16, 3&#125;; bubbleSort(array, array.length); for (int i : array) &#123; System.out.print(i + " "); &#125; &#125; static void bubbleSort(int[] array) &#123; for (int i = 0; i &lt; array.length - 1; i++) &#123; for (int j = 0; j &lt; array.length - 1 - i; j++) &#123; if (array[j] &gt; array[j + 1]) &#123; int tmp = array[j + 1]; array[j + 1] = array[j]; array[j] = tmp; &#125; &#125; &#125; &#125; static void bubbleSort(int[] array, int length) &#123; if (length == 0) &#123; return; &#125; else &#123; for (int i = 0; i &lt; length - 1; i++) &#123; if (array[i] &gt; array[i + 1]) &#123; int tmp = array[i + 1]; array[i + 1] = array[i]; array[i] = tmp; &#125; &#125; &#125; bubbleSort(array, --length); &#125;&#125; 快速排序 时间复杂度：O(nlogn) 实现 1234567891011121314151617181920212223242526272829303132333435363738394041/** * （双指针）快排：选定基准，分治比较 * 时间复杂度：最坏情况 N^2 ,平均 NlogN */public class QuickSort &#123; public static void main(String[] args) &#123;// int[] array = new int[]&#123;3, 8, 11, 13, 9, 2, 1, 4, 16, 3&#125;; int[] array = new int[]&#123;3,3,4,3&#125;; quickSort(array, 0, 1, array.length - 1); for (int i : array) &#123; System.out.print(i + " "); &#125; &#125; static void quickSort(int[] array, int pivotIndex, int left, int right) &#123; if (left &gt; right) &#123; return; &#125; int pivot = array[pivotIndex]; while (left &lt;= right) &#123; //交换元素 if (array[left] &gt;= pivot &amp;&amp; array[right] &lt;= pivot &amp;&amp; array[left] &gt; array[right]) &#123; int tmp = array[left]; array[left] = array[right]; array[right] = tmp; &#125; if (array[left] &lt; pivot) &#123; left++; &#125; if (array[right] &gt;= pivot) &#123; right--; &#125; &#125; //置换pivot到中部 array[pivotIndex] = array[left-1]; array[left-1] = pivot; //递归排序 quickSort(array, pivotIndex, pivotIndex + 1, left - 1); quickSort(array, left, left + 1, array.length - 1); &#125;&#125; 堆排序(TODO)计数排序 时间复杂度：O(m+n)，n: 数据个数，m: 数据范围 实现 12345678910111213141516171819202122232425262728293031323334353637383940public class CountingSort &#123; public static void main(String[] args) &#123; int[] array = new int[]&#123;3, 8, 11, 13, 9, 2, 2, 4, 16, 3&#125;; countingSort(array); for (int i : array) &#123; System.out.print(i + " "); &#125; &#125; static void countingSort(int[] array) &#123; //1.计算计数数组长度和偏移量 int max = array[0]; int min = array[0]; for (int i = 1; i &lt; array.length - 1; i++) &#123; if (min &gt; array[i]) &#123; min = array[i]; &#125; if (max &lt; array[i]) &#123; max = array[i]; &#125; &#125; int[] countingArray = new int[max - min + 1]; //2.计数 for (int i = 0; i &lt; array.length; i++) &#123; countingArray[array[i] - min]++; &#125; //3.原数组排序 int index = 0; for (int i = 0; i &lt; countingArray.length; i++) &#123; if (countingArray[i] == 0) &#123; continue; &#125; else &#123; for (int j = 0; j &lt; countingArray[i]; j++) &#123; array[index++] = i + min; &#125; &#125; &#125; &#125;&#125; 桶排序(TODO)字符串匹配单模式匹配BF 算法（TODO）RK 算法（TODO）BM 算法（TODO）KMP 算法12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061public class KMP &#123; public static void main(String[] args) &#123; String str = "BBC ABCDAB ABCDABCDABDE"; String target = "ABCDABD";// String str = "BCBCC";// String target = "BCC"; System.out.println(kmp(str, target)); &#125; /** * 寻找字符串内是否含有目标字符串 * * @param str 字符串 * @param target 目标字符串 * @return 返回目标字符串在字符串中的下标值，不含则返回-1 */ private static int kmp(String str, String target) &#123; if (str.length() &lt;= target.length()) &#123; if (str.equals(target)) &#123; return 0; &#125; return -1; &#125; char[] strC = str.toCharArray(); char[] targetC = target.toCharArray(); int i = 0; int j = 0; while (i &lt;= strC.length - targetC.length &amp;&amp; j &lt; targetC.length) &#123; if (strC[i + j] == targetC[j]) &#123; j++; &#125; else &#123; if (j &gt; 1) &#123; i = i + j - getPartialNumber(target.substring(0, j)); &#125; else &#123; i++; &#125; j = 0; &#125; &#125; if (j != 0) &#123; return i; &#125; else &#123; return -1; &#125; &#125; private static int getPartialNumber(String string) &#123; if (string.length() &lt; 2) &#123; return 1; &#125; for (int i = string.length() - 1; i &gt; 0; i--) &#123; if (string.substring(0, i).equals(string.substring(string.length() - i, string.length()))) &#123; return i; &#125; &#125; return 0; &#125;&#125; 多模式匹配Trie 树（TODO）算法思维（TODO） 贪心算法 分治算法 回溯算法 动态规划]]></content>
      <tags>
        <tag>迅速拾起技能大作战</tag>
        <tag>知识整理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构（Data structure）整理回顾]]></title>
    <url>%2Fblog%2F2021%2F04%2F07%2Ftech%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%95%B4%E7%90%86%E5%9B%9E%E9%A1%BE%2F</url>
    <content type="text"><![CDATA[线性表（Linear List）线性表（Linear List）：数据结构成线型，只有前后两个方向，即一维数据 数组（Array） 概念：有限个相同类型的变量所组成的有序集合，数组中的每一个变量被称为元素。 存储原理：数组用一组连续的内存空间来存储一组具有相同类型的数据，数组下标从0开始，可根据偏移量来寻址a[i]_address=a[0]_address+i*4 操作：读取O(1)，更新O(1)，插入O(n)（尾部、中间、超范围/扩容插入），删除O(n) 优点：高效的随机访问能力 缺点：1.由于数组元素连续地存储在内存中，插入、删除元素都会导致大量元素被迫移动，影响效率。2. 申请的空间必须是连续的，如果超出范围，需要重新申请内存进行存储。 链表（linked list） 概念：一种在物理上非连续、非顺序的数据结构，由若干结点（node）所组成。 常见链表：单链表、双向链表、循环链表 单链表：每一个结点包含两部分，存放数据的变量data，和指向下一个结点的指针next。 双向链表：每一个结点包含三部分，除了拥有data和next指针，还拥有指向前置结点的prev指针。 循环链表：链表的尾结点next指向头结点（或头结点prev指向尾结点）形成一个环，称为循环链表。 存储原理：链表的每一个结点分布在内存的不同位置，依靠next指针关联起来。这样可以灵活有效地利用零散的碎片空间。 操作：读取O(n)，更新O(1)，插入O(1)，删除O(1) 优点：1.插入、删除、更新效率高。2.省空间。 缺点：查询效率较低，不能随机访问。 栈（stack） 概念：一种线性数据结构，最早进入的元素存放的位置叫作栈底（bottom），最后进入的元素存放的位置叫作栈顶 （top），栈中的元素只能先入后出（First In Last Out，简称FILO） 存储原理：数组实现的栈也叫顺序栈或静态栈，链表实现的栈也叫做链式栈或动态栈 操作：入栈O(1)（压栈，push，动态扩容O(n)），出栈O(1)（弹栈，pop） 应用：函数调用栈，浏览器的后退前进功能。 队列（queue） 概念：一种线性数据结构，出口端叫作队头（front），入口端叫作队尾（rear），队列中的元素只能先入先出（First In First Out，简称 FIFO） 存储原理：数组实现的队列叫作顺序队列，链表实现的队列叫作链式队列 操作：入队O(1)（enqueue），出队O(1)（dequeue） 应用：资源池、消息队列、命令队列等等。 散列表（hash） 概念：散列表也叫作哈希表，提供了键（Key）和值（Value）的映射关系。 存储原理：本质上也是一个数组，通过hash函数把Key和数组下标进行转换，作用是把任意长度的输入通过散列算法转换成固定类型、固定长度的散列值。例如，数组下标=取key的hashcode模数组的长度后的余数： int index = HashCode (Key) % Array.length 操作： 写操作O(m)（put，m为单链元素个数） Hash冲突：即碰撞，由于数组的长度是有限的，当插入的Entry越来越多时，不同的Key通过哈希函数获得的下标有可能是相同的。常见的解决方法有，开放寻址法，在Java中，ThreadLocal所使用的就是开放寻址法；链表法。 读操作O(m) （get，m为单链元素个数） Hash扩容O(n)（resize）：当HashMap.Size &gt;= Capacity×LoadFactor时，需要进行扩容。Capacity，即HashMap的当前长度；LoadFactor，即HashMap的负载因子（阈值），默认值为0.75f。（JDK1.8前在HashMap扩容时，会反序单链表，这样在高并发时会有死循环的可能。Java8之后，当多个Entry被Hash到同一个数组下标位置时，为了提升插入和查找的效率，HashMap会把Entry的链表转化为红黑树这种数据结构。） 优点：读写快 缺点：1.哈希表中的元素是没有被排序的；2.Hash冲突；3.扩容需要重新计算 应用：HashMap，字典，如Redis字典的相关实现包括：字典(dict)、Hash表(dictht)、Hash表结点(dictEntry)，布隆过滤器，位图等 树（tree）树（tree）n（n≥0）个结点的有限集；根结点（root），没有父结点；叶子结点（leaf），没有“孩子”；高度或深度，树的最大层级数 二叉树（binary tree）特殊的树，每个结点最多有2个孩子结点，被称为左孩子（left child）和右孩子（right child），结点顺序固定，左孩子小于右孩子。 满二叉树 一个二叉树的所有非叶子结点都存在左右孩子，并且所有叶子结点都在同一层级上。 完全二叉树 将一个有n个结点的二叉树，按层级顺序编号为1-n，与同样深度的满二叉树的结点编号位置相同 二叉查找树（binary search/sort tree） 在二叉树的基础上要求左子树小于父结点，右子树大于父结点，保证了有序性，查找和插入的时间复杂度为O(logn)，其性能稳定，扩容方便 红黑树（Red Black Tree）—— 一种平衡二叉查找树，极端情况下二叉查找树退化成链表，时间复杂度为O(n)，所以需要平衡二叉查找树。 特征 结点是黑色或是红色 根结点是黑色 每个叶子结点都是黑色的空结点（便利起见，一般省略） 父子结点不能同时为红 从任一结点到其每个叶子的所有路径都包含相同数目的黑色结点（平衡的关键） 新插入结点默认为红色，插入后需要校验红黑树是否符合规则，不符合则需要进行平衡 维持平衡的操作 左旋（RotateLeft）：父结点被右孩子取代，自己成为新父结点的左孩子，原右孩子的左孩子变成原父结点的右孩子。 右旋（RotateRight）：父结点被左孩子取代，自己成为新父结点的右孩子，原左孩子的右孩子变成原父结点的左孩子。 颜色反转：新插入的结点的父结点与叔叔结点同为红色，则反转两者为黑色，将祖结点反转为红色 5种插入结点的情况 新结点为根结点，直接置为黑色 新结点的父结点是黑色，不作调整 新结点的父结点与叔叔结点同为红色，需将反转两者为黑色，将祖结点反转为红色 新结点的父结点是红色，叔叔结点是黑色或者没有叔叔，新结点是右孩子，其父结点是左孩子，我们以父结点为轴左旋，使得新结点成为父结点，原父结点成为新结点的左孩子，进入情况5 新结点的父结点是红色，叔叔结点是黑色或者没有叔叔，新结点是左孩子，其父结点是左孩子，我们以祖结点为轴右旋，使得父结点代替祖结点，祖结点成为新祖结点的右孩子。将新祖结点置为黑色，原祖结点置为红色。 时间复杂度：O(logn) 应用：在JDK1.8中HashMap使用数组+链表+红黑树的数据结构。 存储 链式存储：二叉树的每一个结点包含3部分，存储数据的data变量，指向左孩子的left指针，指向右孩子的right指针 数组存储：一个父结点的下标是n（根结点在数组中的下标为0），那么它的左孩子结点下标就是2×n+1、右孩子结点下标就是2*n+2，没有则以空表示，因此，对于一个稀疏的二叉树来说，用数组表示法是非常浪费空间的 遍历 深度优先偏向于纵深，“一头扎到底”的访问方式 前序遍历：根，左，右 中序遍历：左，根，右 后序遍历：左，右，根 广度优先层序遍历，按照从根结点到叶子结点的层次关系，一层一层横向遍历各 个结点，可以利用队列实现——根结点A进入队列，根结点A出队，得到根结点孩子结点，A的左孩子B进队列，A的右孩子C进队列，左孩子B出队列，B的左孩子E进队列，B的右孩子F进队列，C出队列，C的孩子进队列…… 多路查找树（muitl-way search tree）每一个结点的孩子数可以多于两个，且每一个结点处可以存储多个元素。 B树（BalanceTree） 对二叉查找树的改进，它的设计思想是，将相关数据尽量集中在一起，以便一次读取多个数据，减少硬盘操作次数。 一棵m阶的B树 (m叉树)的特性如下 B树中所有结点的孩子结点数中的最大值称为B树的阶，记为M 树中的每个结点至多有M棵子树 若根结点不是叶子结点，则至少有两棵子树 除根结点和叶结点外，所有结点至少有m/2棵子树 所有的叶子结点都位于同一层 B+树 B树的变体，是一种多路搜索树，其定义基本与B树相同，它的自身特征是： 非叶子结点的子树指针与关键字个数相同 非叶子结点的子树指针P[i]，指向关键字值属于[K[i], K[i+1])的子树 为所有叶子结点增加一个链指针 所有关键字都在叶子结点出现 应用：MySQL索引B+Tree B树是为了磁盘或其它存储设备而设计的一种多叉平衡查找树 B树的高度一般都是在2-4这个高度，树的高度直接影响IO读写的次数 如果是三层树结构，支撑的数据可以达到20G，如果是四层树结构，支撑的数据可以达到几十T B和B+的区别 非叶子节点是否存储数据： B树是非叶子节点和叶子节点都会存储数据， B+树只有叶子节点才会存储数据 数据排布：B+树存储的数据都是在一行上，而且这些数据都是有指针指向的，也就是有顺序的。 二叉堆二叉堆本质上是一种完全二叉树。 分类 大顶堆(最大堆)：最大堆的任何一个父节点的值，都大于或等于它左、右孩子节点的值，最大堆的堆顶是整个堆中的最大元素 小顶堆(最小堆)：最小堆的任何一个父节点的值，都小于或等于它左、右孩子节点的值，最小堆的堆顶是整个堆中的最小元素 存储原理 完全二叉树比较适合用数组来存储。用数组来存储完全二叉树是非常节省存储空间的，因为我们不需要存储左右子节点的指针，单纯地通过数组的下标，就可以找到一个节点的左右子节点和父节点。 图（待整理） 相关概念 顶点 边 度 分类 有向图 无向图 带权图 实现：领接矩阵（二维数组）/ 邻接表 遍历 应用]]></content>
      <tags>
        <tag>迅速拾起技能大作战</tag>
        <tag>知识整理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[解决 Mac下 Brew 更新缓慢的问题]]></title>
    <url>%2Fblog%2F2021%2F01%2F27%2Ftech%2F%E8%A7%A3%E5%86%B3%20Mac%E4%B8%8B%20Brew%20%E6%9B%B4%E6%96%B0%E7%BC%93%E6%85%A2%E7%9A%84%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[Mac 下 Brew 更新报错 123456789101112131415==&gt; Fetching /usr/local/Homebrew...remote: Enumerating objects: 8643, done.remote: Counting objects: 100% (8643/8643), done.remote: Compressing objects: 100% (96/96), done.fatal: the remote end hung up unexpectedly24 MiB | 15.00 KiB/sfatal: early EOFfatal: index-pack failed==&gt; Resetting /usr/local/Homebrew...Branch 'master' set up to track remote branch 'master' from 'origin'.Reset branch 'master'Your branch is up to date with 'origin/master'.==&gt; Fetching /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core...^C 报错原因及解决办法 切换到国内 Gitee 的镜像源。参考指令如下： 1234567# 更新 brewcd "$(brew --repo)"git remote set-url origin https://gitee.com/brew-cn/brew.git# 更新 homebrew-corecd "$(brew --repo)/Library/Taps/homebrew/homebrew-core"git remote set-url origin https://gitee.com/brew-cn/homebrew-core.git]]></content>
      <tags>
        <tag>迅速拾起技能大作战</tag>
        <tag>问题解决</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[解决 Mac 升级为 Big Sur 系统后 Homebrew 命令失效的问题]]></title>
    <url>%2Fblog%2F2021%2F01%2F27%2Ftech%2F%E8%A7%A3%E5%86%B3%20Mac%20%E5%8D%87%E7%BA%A7%E4%B8%BA%20Big%20Sur%20%E7%B3%BB%E7%BB%9F%E5%90%8E%20Homebrew%20%E5%91%BD%E4%BB%A4%E5%A4%B1%E6%95%88%E7%9A%84%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[报错内容 123456789101112Traceback (most recent call last): 10: from /usr/local/Homebrew/Library/Homebrew/brew.rb:23:in `&lt;main&gt;' 9: from /usr/local/Homebrew/Library/Homebrew/brew.rb:23:in `require_relative' 8: from /usr/local/Homebrew/Library/Homebrew/global.rb:28:in `&lt;top (required)&gt;' 7: from /usr/local/Homebrew/Library/Homebrew/global.rb:28:in `require' 6: from /usr/local/Homebrew/Library/Homebrew/os.rb:3:in `&lt;top (required)&gt;' 5: from /usr/local/Homebrew/Library/Homebrew/os.rb:21:in `&lt;module:OS&gt;' 4: from /usr/local/Homebrew/Library/Homebrew/os/mac.rb:58:in `prerelease?' 3: from /usr/local/Homebrew/Library/Homebrew/os/mac.rb:24:in `version' 2: from /usr/local/Homebrew/Library/Homebrew/os/mac.rb:24:in `new' 1: from /usr/local/Homebrew/Library/Homebrew/os/mac/version.rb:26:in `initialize'/usr/local/Homebrew/Library/Homebrew/version.rb:368:in `initialize': Version value must be a string; got a NilClass () (TypeError) 报错原因及解决办法 旧版本 Homebrew 不适配 Mac 的 Big Sur 系统，也因此失效，升级到最新的 Homebrew （brew update-reset）后解决这个问题。]]></content>
      <tags>
        <tag>迅速拾起技能大作战</tag>
        <tag>问题解决</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[己亥年六月廿六诗]]></title>
    <url>%2Fblog%2F2019%2F07%2F28%2Fpoems%2F%E5%B7%B1%E4%BA%A5%E5%B9%B4%E5%85%AD%E6%9C%88%E5%BB%BF%E5%85%AD%E8%AF%97%2F</url>
    <content type="text"><![CDATA[己亥年六月廿六诗万物皆有灵，灵台皆不明。混沌知疾行，行只雾中寻。辟道光明径，径达无人迎。理乐驳生性，性本善人群。好事莫行情，情是碑无邻。此间是长河，河边歌且行。远闻无需言，言外昆仑齐。]]></content>
      <tags>
        <tag>小诗</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[千只鹤（完）]]></title>
    <url>%2Fblog%2F2019%2F06%2F20%2Fnotes%2F%E5%8D%83%E5%8F%AA%E9%B9%A4%2F</url>
    <content type="text"><![CDATA[摘记关于记忆的玄妙菊治连三四年前亡故的父亲和母亲的容颜，也都难以在脑际明确地描绘出来。看到他们的照片后，才确有所悟似地点点头，也许越亲近、越深爱的人，就越难描绘出来。而越丑恶的东西，就越容易明确地留在记忆里。雪子的眼睛和脸颊，就像光一般留在记忆里，是抽象的。可是，近子那乳房与心窝间长的那块痣，却像癞蛤蟆一般留在记忆里，是很具体的。 罪孽与悲伤 或是 罪孽的悲伤“是罪孽的话，也许就不会消失，而悲伤则会过去的。” 死者的俘虏“但看着这只茶碗，谁也不会想起原物主的坏处吧。家父的寿命短暂，甚至仅有这只传世的茶碗寿命的几分之一……”“死亡就在我们脚下。真可怕啊！虽然明知自己脚下就有死，但是我想不能总被母亲的死所俘虏，我曾做过种种努力。”“是啊，一旦成为死者的俘虏，就会觉得自己好象不是这个世间的人似的。”菊治说。 关于对于死者的道德死了的人是不会强迫活着的人接受道德的。 尚未读懂的一句骚话…………母亲的身体微妙地转移到女儿身上，菊治曾被这一点所吸引，做过离奇的梦，如今反而消失得形迹全无了。他终于从长期以来被罩住的又黑暗又丑恶的帷幕里钻到幕外来了。难道是文子那纯洁的悲痛拯救了菊治？文子没有抗拒，只是纯洁本身在抵抗。菊治正像一个坠入被咒语镇住和麻痹的深渊的人，到了极限，反而感到自己摆脱了那种咒语的束缚和麻痹。犹如已经中毒的人，最后服极量的毒药，反而成了解毒剂而出现奇迹。 还是这个，回想“只有纯洁本身在抵抗” 是人的劣根性？？但是不久，菊治在黑暗的深渊里，一边合上眨巴着的眼帘，一边回想起那时候文子毫无抵抗，只有纯洁本身在抵抗。只有卑劣而龌龊的拼命挣扎。他将蹂躏文子的纯洁的胡思乱想化为力量，试图玷污雪子的纯洁。虽然这是不详的毒药，然而雪子那大方的举止 不可避免地引起了菊治对文子的回忆，即便是痛苦得不得了。 记忆的污点菊治用双手使劲地将雪子拥抱起来。雪子羞怯地搂住菊治的脖子。菊治浑身仿佛被一股悲伤的情绪所侵袭，他断断续续地说：“我嘛，并不残废，我并不残废。但我记忆的污点和背德行为，这家伙不会饶恕啊。”雪子像是昏了过去似的，沉甸甸地依偎在菊治的怀里。 逃避我只是为了同于母亲有牵连的你分手，才想来父亲故里的，仅此而已。为了从母亲疯狂般的爱的旋涡中摆脱出来，我想回到健康的父亲的回忆里。然而，来到岩石山环绕的小小市镇，一进入黄昏时分，不禁产生一种寂寞的感觉，宛如失败逃跑的人来到了与世隔绝的村庄。 匆匆读完一遍读千只鹤及波千鸟是匆匆的，在飞机上，在地铁里，匆匆地读完了。以至于后来与人谈起，那人说起文子的死，我才发现我竟没有读到这一段，或者说我略过了。之后也没有去找相关的段落，便让这本书的第一遍就这样过去了。 我应是漏掉了好多东西。 关于茶具罐器等的大段描写，我没有细看。我只记得茶道在此近乎于神性了。 关于雪子的描写，我也没有细看，关于她的处女的纯洁，我只从书封的简介中领略，我并不感兴趣的。 我总是错过作者的本意。 而正如菊治所说的记忆的玄妙，我只记住了两件事是具体的。 一是近子乳房上的长毛的黑痣，二是文子纯洁的无效的抵抗。（其实还有一件，是雪子对于菊治所说的他的背德，像是“昏过去了”那一段，背德对纯洁的憧憬与保护，纯洁对背德的包容。） 近子觉得乳房上的黑痣会缠住孩子的一生，故未婚未育。所以不是孩子，是她的一生中明亮的部分，被这乳房上黑痣缠住了，还滋生了龌龊。我觉得人是会如此的，我曾做下的不符合我内心道德准则的举动，小到没有选择几步之远的人行道而直接穿过马路这样的事情，也会成为那样的黑痣，短暂地缠困住我。与近子不同的是，我没有天生的“黑痣”来封闭我的许多官能去感知世界，从而变得卑劣虚势。 而文子的纯洁本身的抵抗，我一直没有读懂，什么是文子所谓的纯洁本身的抵抗呢。文子的母亲太田夫人与菊治的父亲有私，太田夫人将菊治的父亲投射在菊治的身上，夫人去世后，菊治又将文子当作其母亲的延续来对待，而文子因为对母亲的背德感到愧疚，对菊治的父亲产生了所谓的“亲切”。其中的纯洁与背德，本是对立的两面，读来却并不在各自的彼岸。形成了一个循环的对立统一的莫比乌斯环。这是一个魔术，让我在阅读时只觉到每个人的哀伤，所有的背德似乎都理所当然。但当我过了几日再做摘记时，是怎么也理解不了这畸形的感情了。女人的美与卑微，男人的自私、对美及纯洁的憧憬都让我感到难以适应。这所谓的纯洁本身的抵抗，就更难理解了。 日本的作品，我是十分能读的。从书籍到电影，都与我十分契合。我第一次读太宰治的时候还小，但已经能读到孤独与苦楚了，读三岛由纪夫的时候，也是能烧了金阁寺的。但对川端康成和大江健三郎，按常识来说，这是最有成就的两位日本作家，我却一直没有读过。这是我第一次读川端康成一部完整的作品，大约是需要仔细再读一遍才能读出些什么吧。 我不会去看别人的点评，也不会去听别人的见解，我会读第二遍，以我个人的情绪与思维，但需再过些时日。 哦，对于，太田夫人为什么会自杀，近子为什么不自杀。我觉得是不同环境成长的人对于哀伤的感识，生死的解说都不一样吧。生长于社会底层的人，由于眼前的大山太多，而不得不搁置心中的思绪，进行务实的行动，而这种忙碌的“务实”行为，恰好能让他们不必正面对上死亡。而养尊处优的人，更有生活的富余时间去体察心绪。面对死亡，也更加无处可逃吧。我是这样理解的。而前者对于后者这种行为，一般归因为：吃饱了撑的没事干。]]></content>
      <tags>
        <tag>摘记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[每日记]]></title>
    <url>%2Fblog%2F2019%2F06%2F01%2F%E6%AF%8F%E6%97%A5%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[2021年3月16日戈多是谁，为什么要等他。戈多是谁，凭什么要等他。 2021年3月14日写起来鸡毛蒜皮的事，彼时的确是附骨之疽。C’est la vie。 2021年1月9日那些在大潮里标新立异的人，甚至包括我自己，我们都误会了个人的意义，个性并不能成就个人的全部。 2020年9月5日诚然，大多数关于曲折搓磨的讲述，都只是为了美化失败而已。 2020年8月21日死亡是忧郁的，对大多数人来说。但对于好些人来说，选择死亡，是终于有一天完成了所有爱的人对其的生的期待。这并不负面，是透明的社会给神秘的死亡赋予的​仪式性浪漫。​ 2020年6月25日若因为生活上的糟糕而觉得人生迷雾重重，又因为生活上的顺利而觉得豁然开朗，那便全然成了生活的附庸。 2020年3月3日那些人在疫情期间的写作，字里行间充斥的只一句话 —— “我必须写点什么，证明我也生在一个特殊的时代”。 2019年12月8日付出一些心血的事情可以立马放弃，看不到未来的事情也可以即时开始。 2019年9月30日对的路有千万条，错的方式也千奇百怪，又何必拘泥于其中之一的胜利与失败呢。 2019年9月22日人到了一定要做善事来平息内心的地步，一定是可怜可恨的吧。 2019年9月17日 本能的天才也许偶尔能够炮制出一部优秀的作品，但完美和多产却不可能仅来自那无师自通的本能。—— 罗伯特·麦基《故事》 2019年9月6日 现在车有了，歌也有了，你倒没兴致了。——《相亲相爱》 2019年8月21日 孟子曰：“人之患在好为人师。” —— 《孟子》卷七 离娄上 2019年8月5日 所恶于上，毋以使下；所恶于下，毋以事上；所恶于前，毋以先后；所恶于后，毋以从前；所恶于右，毋以交于左；所恶于左，毋以交于右；此之谓絜矩之道。 ——《大学》 2019年8月4日 君子慎独 2019年8月2日 人莫知其子之恶,莫知其苗之硕——《大学》 2019年7月30日今天读《大学》，所谓修身齐家治国平天下之前，还有格物致知诚意正心。 大学之道，在明明道，在亲民，在止于至善。物有本末，事有始终，知所先后，则近道矣。古之欲明明德于天下者，先治其国；欲治其国者，先齐其家；欲齐其家者，先修其身；欲修其身者，先正其心；欲正其心者，先诚其意；欲诚其意者，先致其知，致知在格物。物格而后知至，知至而后意诚，意诚而后心正，心正而后身修，身修而后家齐，家齐而后国治，国治而后天下平。 2019年7月28日理乐驳生性 2019年7月26日 你们的肉体在讲到你们的灵魂时说些什么呢？你们的灵魂不就是贫乏，不洁和可怜的安逸吗？——《查拉图斯特拉如是说》 2019年7月24日今天我理解那些——因为被发现给历任女友买了一样的礼物而被称之为渣男的——男生，因为我对我的女性好友也干了一样的事情。送礼物太难了。 2019年7月22日 幸福与否不在于庞大的所得，而在于渺小的欲望。 —— 彼得・布雷瓦 《利维坦之书》 爱情于我亦如此 2019年7月21日 你们处死的人，你们应称之为“敌人”，而不该称之为“坏人”；你们应当称之为“病人”，而不该称之为“流氓”；你们应称之为“蠢人”，而不应称之为“罪人”。 ——《查拉图斯特拉如是说》 2019年7月17日很多人都这样，无人谴责，便不觉得自己做错了事情。你可千万别。 2019年7月15日各位真的介意谎言么，还是真的在意真相呢。还是在意这中间带来的趣味呢。娱乐至上的年代，是真相也于事无补的年代吧。 2019年7月12日我们拒绝不公平，到底是拒绝这种现象，还是拒绝自己在这天平不占便宜的一方呢。 2019年7月11日今天听到蛮有趣的说法，据说是陈寅恪说的，但我没有查到相关资料。说法是这样：就是说 这个道德变换的时代，有一种人叫“巧人”，有一种叫“拙人”。“巧人”是享受了新规则的权利，用新规则的权利避开了旧规则的义务，用旧规则的权利避开了新规则的义务。“拙人”就是老实人，承担了双重义务。 但其实在上帝面前，“巧人”就显得更拙劣了。 2019年7月9日 报纸上总在说 股票战争和保险 我其实只想看一看 昨天谜语的答案 ——熊熊作业《和小贩一起在街头徜徉》 2019年7月8日我们为什么总要区分痛苦的程度呢。一个摔跤的小孩和一个被生活压垮的青年人，在他们悲伤的时候，都承受着一样的痛苦。我是这样认为。 2019年7月4日这似乎是个人人都有各样立场的独立自由时代。但各位又有多少经历故事信仰，去支撑你站在你所谓的立场呢。还是世界都默认，独立自由的思想是服务于高效交互的社会的呢。 2019年7月2日我是一个极其挑剔的人，从前两日的日记可以看出，连别人道歉的真心和对自己的宽容我都要挑剔。挑剔到有人走到我的内心定会说。哦，这人不配爱人，被爱也很难。 2019年7月1日在难堪发生的时候，当下自我接受是件非常难的事情。简单的是日后对自我的宽容。 2019年6月30日在错事发生的时候，当下道歉是很简单的，难的是事后致歉。 2019年6月29日人不能时常说话，说着说着聊嗨了。然后呢就容易说出一些觉得自觉有趣但没有分寸的话，然后再说一些有分寸但没有趣的话去掩盖它。然后就在别人心里留下了即没分寸又不有趣的印象。所以，聊嗨时请注意。 2019年6月28日我不是一个把丑话说在前面的人，因为基本上我后面也没什么好话。 2019年6月1日睡前去书房找游戏机的手柄却意外发现了书架上层的塑料袋。装着满满的奖状。说起来算是上个年代的我在这个六一儿童节给自己的时间邮戳。这是件很奇妙的事情，破碎的氧化的纸张，被主人遗忘，却被其父母收藏。成人世界里没有奖章，别人的评价似乎能搭建你的领奖台。我看不起这样的人，但也没有多看得起自己。漫长的一段时间里我都在找自己。这是一个很俗的事情。我一直羞于开口。但又确确实实是发生了。这也是一个拖累人生的事情，我失去好些朋友，在我的自我闭塞里。我会想，这不是一个见面的好时机。我为家中的小辈准备了礼物，可惜没能在今天送达。早上我说我要做孩子的愿望机。因为长大之后没人听见你的真实的糟糕愿望。你无法面对你高兴生活着的父母以及任何人说扫兴的话。对于严肃的心事，总是害怕被人看见却又渴望。]]></content>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[致D（完）]]></title>
    <url>%2Fblog%2F2019%2F05%2F12%2Fnotes%2F%E8%87%B4D%2F</url>
    <content type="text"><![CDATA[190512（完）译者对感情的观点我不知道，如果自己已经把爱情的实质视作对谎言的维护，是否还能够投入一段他人的，在追寻生命本质层面上的爱情？ 译者对“避处”的看法高兹或许从来不怀疑，D的爱情为他提供了“避处”。社会没有给过他安全的感觉，从童年开始，到年轻时代所经历的一切，战争，生存。但仅仅作为“避处”，男人仍然会犹豫，因为他不知道这样的“避处”是不是具有永恒的意义。如果他从来没有学会过承担。他又怎么能够指望女人来帮助他“承担自己的存在”？我仿佛就是在“避处”这样的字眼前犹豫的，因为这个词让我有些厌烦，用两个人的世界来遮蔽令人倍感不适的社会，这是很多人相爱的理由。男人会对女人这样说，女人也会对男人这样说。激情来到的时刻，在“对方的声音、气味、肤色、动作和存在的方式成为一种理想的标准，能够在内心深处激荡起回声”的时候，没有人会怀疑一个人就足以平复自己身处人群与社会之中的孤独与寂寞。但是这依然不能阻挡日后的分离。 译者对于激情褪去的看法幸运的是，在共同度过了五十八年之后，这个以文字为生的男人可以写下“万一有来生，我们仍然愿意共同度过“，用平静的幸福清偿当年激情奠定的幸福。 关于婚姻中欲望变动的处理接下来的三个月里，我们计划结婚。对于婚姻我有一种原则性的，观念性的偏见。我认为婚姻是一种资产阶级的固有习惯；是将一种关系法律化和社会化，一种原来仅凭爱情将两个人联系在一起，完全没有社会性的关系。面对两个人的体验和情感，法律关系会产生自我管理的倾向——甚至法律关系是将自我管理当作使命来完成的。我也一直说：“什么能够证明，在十年或二十年后，我们历经变化，而这种生活的契约仍然能够满足我们的欲望呢？”你的回答令我无法抵挡：“如果你和一个人结合在一起，打算度过一生，你们就将两个人的生命放在一起，不要做有损你们结合的事情。建构你们的夫妻关系就是你们共同的计划，你们永远都需要根据环境的变化而不断地加强，改变，重新调整方向。你们怎么做，就会成为怎样的人。”——这几乎就是萨特的哲学。 关于病人的孤独你的病情突然严重起来，我去见了这位医生。在你头痛的厉害时，你甚至都躺不下来。你整夜站在阳台上，或是坐在扶手椅里。我曾经想要相信我们的一切都是共同的，但是当你沉浸在痛苦中的时候，你却是那么孤独。 关于难得的承诺我不要参加你的火化葬礼，我不要收到装有你骨灰的大口瓶。我听到凯瑟琳·菲丽儿在唱，“世界是空的，我不想长寿”，然后我醒了。我守着你的呼吸，我的手轻轻掠过你的身体，我们都不愿意在对方去了以后，一个人继续孤独地活下去。我们经常对彼此说，万一有来生，我们仍然愿意共同度过。 读后关于爱情我所知甚少。读这本书的主因是它轻薄好携带，其次是因为这句话：“用两个人的世界来遮蔽令人倍感不适的社会，这是很多人相爱的理由”，有趣的是这是译者的话，而不是作者的话。感兴趣这句话的理由是太真实了。太多人为此恋爱了。由此我是否可以这样解释呢，相爱是可以培养的，是可以封闭一些感识去培养相爱这种感识的。这与我本身的认知产生了冲突，我以为是爱情驱动人的，而这似乎是人驱动爱情的。anyway，我还不是很懂，但会执迷不悟在这爱情的起因上，也是我单身一万年的强壮的理由。但我现在已经能正面对上这个话题了。我现在可以说，爱情，是人必不可少的难能可贵的经历。没有拥有过爱情的人，我认为是残缺的，比如我，就是个残疾人。]]></content>
      <tags>
        <tag>摘记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[不要温顺地走进那个良宵]]></title>
    <url>%2Fblog%2F2019%2F04%2F12%2Fnotes%2F%E4%B8%8D%E8%A6%81%E6%B8%A9%E9%A1%BA%E5%9C%B0%E8%B5%B0%E8%BF%9B%E9%82%A3%E4%B8%AA%E8%89%AF%E5%AE%B5%2F</url>
    <content type="text"><![CDATA[此段文字摘录只用来警醒本人我不在乎一首诗的意象从何处捞来：如果你喜欢，你可以从隐蔽的自我的大海最深处打捞它们；但是在抵达稿子之前，它们必须经过非凡才智的所有理性加工；另一方面，超现实主义者却把从混沌中浮现出来的词句原封不动地记录到稿子上；他们并未塑造这些词语或按一定的秩序加以整理，在他们看来，混沌即形式和秩序。这对我而言似乎太过自以为是，超现实主义者想象从潜意识自我中随便捞出什么，就以颜料或文字记录下来，本质上就存在一定的趣味或一定的价值。我否定这一点。诗人的一大技艺在于让人理解潜意识中浮现的东西并加以清晰的表达；才智非凡的诗人的一大重要作用就在于从潜意识纷繁的无形意象中选择那些最符合想象目标的东西，继而写出最好的诗篇。 一旦晨曦不再伫留（节选）醒来吧，我的沉睡者，迎着阳光，小镇早起忙碌的劳动者，离别在此醉生梦死的马屁精；光的栅栏大片坍塌，除了敏捷的骑手，人人都被摔下，而世界悬挂在树梢。 在我敲开之前（节选）在肌肤和血管围拢井口之前，我的喉咙早已知道干渴，言词和水在那儿融为一体，无穷无尽，直到血发臭；我的心感受到爱，胃饱尝饥饿；我在自己的粪便嗅到蛆虫。 时光抛出我凡夫俗子的躯体追随咸潮奔涌的冒险在海上漂泊沉浮却未曾触及到岸。我啜饮时光的葡萄汁愈加变得奢华富有。 我的灵与肉天生一体，非人亦非魔，却是凡间的幽灵。我被死亡的羽毛击倒在地。终有一死，我最后一口长长的呼吸捎给父亲那基督临终的口信。你俯首眼前的十字架和祭坛，记着我，并怜悯基督，是他误将我的骨肉当成盔甲，欺骗了我母亲的子宫。 穿过绿色茎管催动花朵的力通过绿色茎管催动花朵的力催动我绿色的年华；摧毁树根的力摧毁我的一切。我无言相告佝偻的玫瑰是同样的寒冬热病压弯了我的青春。 催动流水穿透岩石的力催动我鲜红的血液；驱使溪流干涸的力驱使我的血流衰微。我无言相告我的血管同是这张嘴怎样吸干山涧的清泉。 搅动一泓池水的旋转的手搅动沙的流动；牵动风前进的手也扯动我裹尸布般的风帆。我无言相告那绞死的人我的泥土怎样制成绞刑吏的石灰。 时间的嘴唇水蛭般紧贴泉源爱滴落又聚集，但是流淌的血一定会抚慰她的伤痛。我无言相告一个季候的风时光是怎样围绕星星滴答出一个天堂。 我也无言相告情人的坟墓我的被褥上蠕动着一样扭曲的蛆虫。 我的英雄裸露他的神经（节选）我的英雄裸露他的神经沿着手腕到臂膀，掀开斜靠我肉身之上的头颅，像个昏昏欲睡的幽灵，那高傲的脊梁巍然挺立。 而可怜的神经线圈般连接头颅在失恋的纸笺上疼痛不已我以狂放的草书拥抱爱情倾诉所有爱的饥渴在纸页书写空虚的病痛。 我们的阉人梦见（节选）这就是世界：我们躺着一样的衣衫褴褛，我们相爱却又勉强如愿；梦境将掩埋的尸体踢出眠床，也让残骸像生者一样受人敬仰。这就是世界。信心满满。 因为我们将像公鸡一样叫唤，唤回昔日的死者；我们的拍摄将毁去碟中的影像；我们将是顺应生活的伙伴，活着的人们将开出爱的花朵，颂扬我们远去的心。]]></content>
      <tags>
        <tag>摘记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RustyLake:Roots]]></title>
    <url>%2Fblog%2F2019%2F03%2F27%2Fgames%2FRustyLake-Roots%2F</url>
    <content type="text"><![CDATA[MindMap SACRIFICES —— 舌头 脚 血液 头发 眼睛 眼睛 牙齿 大脑 眼泪 心脏 人物 James Leonard Rose Frank Samuel Ida Mary Albert Emma William 章节 八 二十三 三十一 二十八 二十 二十 十九 二十七 十七 三 人员生平James：死于1870年7月25日（第七章），喝长生不老药猝死Mary: 死于1904年5月1日(第十九章)Emma：生于1867年4月26日（第五章），死于1896年10月16日（第十七章），因找不到儿子Frank上吊而死Samuel：生于1867年4月26日（第五章），死于1904年12月30日（第二十章），被Albert挖去双眼死亡Ida：死于1904年12月30日（第二十章），被Albert挖去双眼死亡Albert：生于1867年4月26日（第五章），死于1926年2月3日（第二十七章），被复仇的Frank掐死Frank：1891年秋天被Albert坠入井中（第十四章），1924年秋天在Rose的帮助下逃脱出井（第二十五章），1935年春天为Uncle William的重生而牺牲（第三十三章）Leonard：1914年春天赶赴战争（二十二章），在战争中失去右腿（二十三章），1935年春天为Uncle William的重生而牺牲（第三十三章）Rose：1909年夏天出生，是Albert制作的他与Ida卵子的实验婴儿（二十一章），1919年秋天决定帮助William（第二十四章），1935年春天促使Uncle William重生（第三十三章）Uncle William：吃了自己制作的长生不老药而变成游魂状态，一直到1935年在Rose等人帮助下重生Dog：1870年吃了James喂的长生不老药，获得永生 线索1860 Spring Rusty Lake，Spring 1860.James Vanderboom arrived at Rusty Lake.His uncle had just passed away under mysterious crcumstances.James was his uncle’ s only heir .He had no idea of the events that would unfold and change his life. Dear James,I regret to inform you that your uncle has passed away.He has left you his house and a very special seed.plant it and start your own family. 第一章.James1.院子：洒水壶，密码572，2.行李箱：骨头，种子3.井：一壶水4.狗+骨头+种子+水：脱帽James 第二章.The House1.钻石（绿）：树枝，可移动矮凳，蠕虫2.钻石（紫）：空花盆3.钻石（红）：窗户（乌鸦先生第一次出现） 1860 Summer第三章.The Uncle1.撕开画像（The Vanderboom brother）：钥匙2.右侧柜子+钥匙：火柴，斧头3.斧头+树状：木头4.壁炉+木头+火柴：钥匙5.钥匙+锁住的窗户：左侧柜子密码6.密码+左侧柜子：钟表时刻 08:257.钟表+时刻：uncle8.uncle乳头进嘴巴出：心脏9.心脏放入罐子 1865 Summer第四章.Finding love1.玫瑰+手帕+Mary：颜料（沾血的手帕）2.鸟毛+颜料+James：求婚信3.求婚信+Mary：蠕虫4.蠕虫+乌鸦：钥匙5.钥匙+锁住的柜子：戒指6.戒指送给Mary 1867 Spring 04.26第五章.Childbirth1.柜子：剪刀，钵杵，勺子2.剪刀+绿植：植物3.植物+勺子+研钵+钵杵：一勺出生药水4.药水+Mary+剪刀：三个婴儿+一个胎盘5.胎盘+狗：钥匙6.钥匙+壁柜：三个奶瓶7.奶瓶+开窗：一瓶雨水8.奶瓶+Mary：一瓶奶水9.奶瓶+婴儿床上的水龙头+酒桶：一瓶酒水11.三瓶奶水+柜子上的信纸： Emma：雨水 —— 花Samuel：奶水 —— 钟表Albert：酒水 —— 面具 1870 Summer 1859 Spring，My brother and I are in the final stage of finding the elixer. This elixir will bring you eternal life or sudden death，alchemist 第六章.The Staircase1.JamesMary合影+James手中书籍+桌上信纸：书柜右下密码：望远镜🔺，⚪，🔺⚪，🌙，🌙🔺，🌙，🔺2.顶层书籍排序：开头左端点，结尾右端点，中间线段相接3.底层书籍排序：正方形开头，十字架结尾，中间颜色相接4.中层排序（望远镜看窗外RustyLakeHotels）：兔，鸽，野猪，乌鸦，鹿，野鸡5.三层密码：Staircase 第七章.The Elixir1.药水重量：+（1lbs），·（2lbs），~（3lbs），⚪（5lbs），×（4lbs）2,elixir：~××⚪3.elixir喂狗得永生，喂James得死亡 第八章.The Wake1.矮柜：银币两枚（一枚桌上，一枚拼图中）2,银币给James做眼睛：一枚眼睛3.James双手戒指排序：一枚眼睛药水重量4,正确的雕塑+两枚眼睛：匕首5.匕首+James：舌头 1876 Spring第九章.Child’s Play Poor children.Their lives will be full of misery.But their legacy will be of great importance.1.树：蜂蜜，枝桠2.花盆：弹珠，盖子3.Emma：弹力带4.枝桠+弹珠+弹力带+Samuel：玩弹弓的Samuel5.Samuel弹弓打蝴蝶，蝴蝶停在Emma头上6.蝴蝶+盖子+蜂蜜：密封蝴蝶的玻璃罐7.（现在要发生一些不好的事情）Samuel弹弓打Albert,Albert帽子掉落8.Albert与Emma争抢蝴蝶，被Emma推倒在树下9.Samuel弹弓打蜂窝，蜂窝掉落砸在Albert头上,Albert毁容,乌鸦先生出现 1884 Spring第十章.Fertility1.整节就是种花（蜜蜂分次采花粉）2.若种错就用树下的工具清除。3,得到花后，按ⅠⅡⅢⅣ种在Emma的花盆里，变成一朵蒲公英？4.Emma一挥手，将蒲公英注入身体里，应该是个受孕过程. 1885 Spring第十一章.MasksAlbert带上不同的面具窗外是不同的天气：1.蓝色面具Albert = 雨天 -&gt; 水壶+窗外的雨：一壶雨水2.一壶雨水+过滤装置：钥匙-&gt;白色面具3.白色面具Albert = 雪天 -&gt; 冰柱4.冰柱+最右画面管子 = 钥匙-&gt;望远镜5.望远镜+白色面具Albert：湖边小屋乌鸦人和密码 -&gt; 竖线三角（梯形分块在左），射线（端点在上）6.望远镜+蓝色面具Albert：山顶乌鸦人和密码 -&gt; 抛物线（开口向上），加点三角（点右）7.图形密码+柜子：月亮面具8.望远镜+月亮面具Albert：嗯，月亮上有人拿望远镜与我对望，告诉我密码：52319.密码+密码箱：蝴蝶10.蝴蝶+Albert：Albert把蝴蝶杀了（Albert对Emma及Samuel的恨意） 1889 Spring第十二章.The Clock The amazing Ida：Fortune teller1.地上的锯子递给Samuel2.拿锯子的Samuel+桌上的胶水+图纸：各种形状的拼接木板3.桌上/桌脚/开窗/墙上Ida的到达通知：三个齿轮4.钟的组件+木板+齿轮+墙上Ida到达时间（03:30）：窗外的Ida5.Ida的烟斗+Samuel口袋的火柴：抽烟的Samuel 1889 Summer第十三章.The Fortune Teller塔罗牌X（五角星）横线三角（叉叉眼布偶）圆心圆（恶魔角布偶）横线圆（树洞的布偶）竖线圆（吊死的布偶）竖线三角（皇冠布偶）|The Star ，Death，The DevilThe Hermit，The Hanged Man，The Empress|\/钥匙 -&gt; 水晶球-&gt;预言：X（带皇冠的女孩，其实是Rose）横线三角（恶魔面具的Albert）圆心圆（挖去双眼的Samuel）横线圆（吊死的Emma）竖线圆（大胡子男人，其实是Frank）竖线三角（望眼镜男人，其实还是Frank）|\/The Empress ，The Devil，DeathThe Hanged Man，The Hermit，The Star|\/水晶球-&gt;预言：Ida与Samuel的结婚照，带鹿面具的Albert操纵人偶，Leonard流血并尖叫，乌鸦先生 1891 Fall Dear son，I have been looking for you for so long.If you find this letter，look for me in the stars.your mother. 第十四章.The Swing1.Albert的刀+南瓜：南瓜面具2.带南瓜面具的Albert：钥匙3.柜子右侧/钥匙+上锁的柜子：玩偶熊手臂/玩偶熊头部-&gt;完整的玩偶熊4.（此处再次行恶）玩偶熊+秋千荡到最高的Frank-&gt;悬挂在水井上的Frank5.（此处再次行恶）单手抱着玩偶熊的Frank+带南瓜面具的Albert转动水井上的旋把-&gt;掉落井底的Frank 第十五章.The Search1.墙上密码箱后/Emma与Frank的合影后/Frank的纪念台？后：三张纸片2.三张纸片+圆几上的纸片：ABCD指示地图（A:风车，B:Hotel左上=62，C:桥右上，D:小屋）3.开窗+望远镜+ABCD指示地图-&gt;（A:04,B:62,C:35,D:33）-&gt;密码箱密码B+C+D-A=62+35+33-4=126 -&gt;邮戳4.邮戳+Frank纪念台上的墨水+最右侧矮柜上信/印台/信筒：带信的信筒5.信筒+鹦鹉：带走信的鹦鹉 1895 Winter第十六章.The Wedding Photo1.衣架/右侧矮柜拼图（黑色立方体）：三个帽子一个头纱2.左侧立柜谜题：上半部分按图形顶点-&gt;白4黑3白5黑3白4-&gt;帽子，下半部分按端点-&gt;白2黑1白2黑3白2黑1白2-&gt;面具3.4个帽子1个头纱1和面具：面具（Albert）头纱（Ida）蓝色帽（Mary）礼帽（Samuel）棕色报童帽（Leonard）黑色帽（Emma）-&gt;拍照 1896 Summer第十七章.The Painting1.花盆右侧：钥匙+柜子-&gt;瓶子，画笔2.瓶子+树缝：油3.绿植：姜，贝壳4.姜/贝壳/树下的浆果+油+研杵+研钵：红，黄，白三种颜色5.颜料+画板+画笔（按花的颜色填色）：完成的画-&gt;吊死的哭泣的Emma 1896 Winter第十八章.The Lying GameGAME： The High Priestess always tells the truth，The Devil always lies.The Chariot lies once.The Empress tells the truth once.Look outside. Mary：√× √ -&gt; The Chariot lies once.1.The locker code ends with 94 √ （柜子密码3794 -&gt; 卡片：The Empress）2.It is summer × （此时是1896年冬天）3.A card is hidden behind the top left corner of the photo √ （结婚照左上角 -&gt; 卡片：The High Priestess）—————————————Albert：× × × -&gt;The Devil always lies.1.My brother is not married × （Samuel与Ida在1895年冬天结婚）2.A card is hidden to the right of the painting × （没有）3.I dont love Ida × （Albert口袋里有Ida的照片，点击Albert看到他的春心直指Ida）—————————————Samuel： √ √ √ -&gt; The High Priestess always tells the truth.1.The locker code starts with 37 √ （柜子密码3794）2.My sister died √ （Emma吊死于1896年夏天，最右侧矮几上的报纸上的新闻亦证实这点）3.A key is hidden behind the bottom right corner of the painting √ （Uncle的Brother的画像的右下角 -&gt; 钥匙 -&gt;开窗得到卡片：The Devil）—————————————Ida： √ × × -&gt; The Empress tells the truth once.1.The devil has my photo in his pocket √（Albert西装口袋里有Ida的照片，且Albert是Devil）2.the locker code ends with 46 × （柜子密码3794）3.a key is hidden under the newspaper × （没有）—————————————1.Mary(The Chariot),Albert(The Devil),Sanuel(The High Priestess),Ida(The Empress) -&gt;放对卡片后看向窗外-&gt;鹿头骨2.带鹿头骨的Albert 1904 Summer第十九章.The Family Band1.矮柜的右上角/Albert的西装口袋/Leonard的口袋+墙上残缺的乐谱：完整的乐谱-&gt;小提琴（EGEG）圆号（AEAE）笛（CBCB）手鼓（TLTL）2.各人演奏：Albert（AEAE）Leonard（CBCB）Samuel（EGEG）Ida（TLTL）-&gt;There will be blood(Albert/Samuel/Ida失踪，Mary死亡)3.死去的Mary口中的牙齿+玻璃罐：牙齿罐 第二十章.Voodoo1.Samuel的烟管+桌上的蜡烛：点燃的蜡烛2.点燃的蜡烛+Albert右手（左侧）人偶：点燃人偶头/左右手-&gt;Samuel被点燃-&gt;高举人偶双手-&gt;Samuel打碎吊灯-&gt;钥匙3.钥匙+白色上锁盒子：针4.针扎入Albert左手（右侧）人偶心脏处：Ida被刺伤5.密码盒上人偶姿势（1.左右端平2.左下右上3.左平右下）+Albert左手（右侧）人偶：1.睁眼闭嘴2.闭眼张嘴3.闭眼闭嘴-&gt;剪刀6.剪刀+左右人偶纽扣眼：Samuel+Ida的两只眼睛（Albert真的是恶魔）7.眼睛+桌上罐子：两罐眼睛 1909 Summer第二十一章.The Brood1.右边矮几：土豆，Ida的卵子???2.土豆+下水管道的男人（目测是Frank）：打火石2.桌上的罐子+Albert：Albert的精液???我想吐3.疏通管道（从漏斗到三颈烧瓶）+精子+卵子：在三颈烧瓶中的精液和卵子4.疏通管道（从水龙头到三颈烧瓶右测入口，从蒸馏器具到三颈烧瓶左侧入口）+打开水龙头+打火石点燃的蒸馏器具：一个新生儿 1914 Spring War is declared. Samuel and Ida Vanderboom murdered? 第二十二章.The War Hero地上分别是摩托车图，日报，图示信息图示信息：每只鸟的飞行路线不同，每个组件得到需要不同数量的鸟到达指定地点1.A组件：需要有三只鸟到达A -&gt;红鸟（上1）白鸟（上3）绿鸟（下1）蓝鸟随意+拉铃一次飞出 一次飞进：A组件2.B组件：需要有两只鸟到达B -&gt;红鸟（上3）绿鸟（下3）其他随意+拉铃一次飞出 一次飞进：B组件3.C组件：需要有一只鸟到达C -&gt;白鸟（下2）其他随意+拉铃一次飞出 一次飞进：C组件4.D组件：需要有四只鸟到达D -&gt;蓝鸟（上1）红鸟（上2）白鸟（下1）绿鸟（下2）+拉铃一次飞出 一次飞进：D组件5.地上的组件+车旁的组件+车+地上的机车图纸：出征的Leonard 1918 Winter Hello,brother.Save Leonard.We need him to find the treasure. 第二十三章.The Trenches1.Leonard左口袋（右侧口袋）：钥匙2.钥匙+抽屉柜：剪刀，钳子3.床尾矮柜：木杯，桌腿4.断腿的Leonard+木杯+桌腿：假腿Leonard5.剪刀+钳子+受伤的左手：去除子弹头6.剪刀+受伤的左腿+移动创口贴遮住血点：翻白眼的Leonard7.点进眼睛：扯爆地上的手雷，拼接黑影 -&gt;尖叫的Leonard8.点进眼睛：扯爆地上的手雷，拼接黑影（父母）-&gt;尖叫的Leonard9.点进眼睛：扯爆地上的手雷，拼接黑影（鹿头Albert？）-&gt;尖叫的Leonard10.点进眼睛：扯爆地上的手雷，拼接黑影（乌鸦先生）-&gt; 钥匙11.点进眼睛：钥匙+上锁的箱子：防毒面具12.防毒面具+Leonard+扯爆地上的手雷：断腿的没死的Leonard13.拼接黑影：密码-&gt;竖线倒三角，横线圆，朝上K-&gt;尖叫的Leonard14.密码+最右侧上锁的盒子：脚 -&gt; 泡进最左侧瓶子 1919 Fall第二十四章.Communication用桌上的纸与选择器跟Rose对话：Rose：Can you hear me？ YesRose：What is your first name ？ WilliamRose：What is your last name？ VanderboomRose：Do you want my key？ Yes -&gt; 拿到钥匙1.钥匙+最右侧镜柜：钥匙，血字LIVE2.钥匙+最左侧密码箱：两张手稿-&gt;三枚Timepieces能open the gate；十个器官的sacrifices能得到rebirth再次用桌上的纸与选择器跟Rose对话：Rose：What do you want？ liveRose：What do you need to live again？ sacrificesRose：What do you need to open the gate？ TimepiecesRose：I will help you. 1924 Fall纸飞机： Please help me:DRINK , FOOD , WOODEN STICK（的暗号） 第二十五章.The Well pt.I1.点击飞机不落地：通信桶2.井底左下角：小熊头里的折线，尖石3.下水通道+尖石：浆果4.浆果+Frank：树枝5.Frank想要Water：通信桶 + Y树枝 + 一树枝 -&gt; 一杯液体（不是Water）6.Frank想要Food：通信桶 + 折线 + Y树枝 -&gt; 鱼 -&gt; 鱼骨7.Frank想要木棒：通信桶 + 鱼骨 + Y树枝 + 一树枝 -&gt; 木棒 -&gt; 逃生的Frank 第二十六章.The Well pt.Ⅱ1.花盆：蠕虫，火柴，杯子2.狗 + 杯子：一杯狗的排泄液体3.捕兽夹 + 蠕虫：鱼4.烧烤架旁的斧头 + 大叔：木材5.Rose手中的木棍 + 鱼 + 火柴 + 木材：烤鱼6.纸飞机：暗号7.Y树枝 + 一树枝 -&gt; 一杯狗的排泄液体8.折线 + Y树枝 -&gt; 鱼9.鱼骨 + Y树枝 + 一树枝 -&gt; 烤鱼的木棍 -&gt; Frank 1926 Fall第二十七章.Checkmate1.黄色壁柜密码：下上下下上上下下上下上-&gt;棋子：马2.壁画：刀，行棋提示：CEREBRUM3.刀+Frank手中的土豆:棋子：王4.王 + 马 + 棋盘：Frank 掐死 Albert -&gt; Albert的大脑第一局：Albert执马3 □ × × □ 王(8)□ □ 4 × × ×5 2 □ × 7 □× × 6 □ × ×□ □ 1 × □ ×马 □ × □ × □第二局：Frank执马，走CEREBRUMR E R S C 王(8)E C R U(7) C UU B B(5) S B VB C C R R(6) R(3)R V C(1) E(4) R E马 S E V E(2) U 1927 Winter第二十八章.The Bathroom1.照镜子后镜子破碎：钥匙2.钥匙 + 抽屉柜：煤炭，火柴3.暖炉上的盆+水龙头:一盆水4.一盆水 + 煤炭 + 火柴 + 暖炉：一盆热水5.关窗 + 封窗 + 热水洗澡：钥匙6.钥匙 + 抽屉：剪刀7.剪刀 + Frank:理了发的Frank，头发8.头发 + 罐子:装头发的罐子 1929 Fall第二十九章.The Treasure1.栅栏：铲子2.树缝：甲虫3.桌上的蚱蜢对跳：绿1黄1黄2绿1绿2绿3黄1黄2黄3绿1绿2绿3黄2黄3绿3 -&gt; 蚱蜢4.甲虫 + 蚱蜢 + 青蛙，石头处起跳：蛙跳3，甲虫接力跳3，蚱蜢接力跳3，甲虫接力跳2，青蛙接力跳2，甲虫接力跳1，蚱蜢接力跳3，金石头标点5.标点 + 铲子：挂表6.挂表 + Leonard：带挂表的Leonard 1930 Winter第三十章.The Stars1.密码箱旁的鸟食物 + 开窗 + 窗边的鸟食架：Emma留给Frank的信 -&gt; 给Frank2.密码箱旁/母子画像/肖像画旁：三张星象卡片3.击落的肖像画后机关：通往阁楼的梯子4.望远镜+星象卡片：（顺序）Tree Cube Deer Crow,Deer是倾倒的星线5.望远镜+肖像画/母子画上星线：玻璃片母亲的星线：My son,Read my letter（emm..已经阅读）乌鸦先生的星线：Hello,brother.Make sure the grandchildren find the three timepieces.Bring the branches back together.6.Frank手中信+玻璃片：密码-&gt;love7.密码 + 密码箱：挂表8.挂表 + Frank：带挂表的Frank 1932 Fall第三十二章.The Graveyard1.土坑：铲子2.狗嘴：骨头3.铲子 + Emma/Ida/Samuel/James的坟墓：四根骨头4.铲子 + Mary：密码箱 -&gt; 密码2233 密码：花+水晶球的月份（前两位）钟表+面具的日期（后两位）-&gt; Emma与Ida的忌月之和（22）Samuel与Albert的忌日之和（33）-&gt; 钻孔器5.钻孔器 + Albert的坟墓：一根骨头6.五根骨头 + 土坑的残骨：骷髅嘴里的挂表7.挂表 + Rose:带挂表的Rose 1933 Spring第三十一章.The Last Dance 10 family members 10 sacrifices 带来 1 rebirth ，此时需要 1 sanguis1.柜子谜题（推箱子）：一张唱片（Mary死的那天演奏曲目）2.播放唱片 + 跳舞 + 密码柜上舞步提示( &gt;&gt;&lt;&lt;&gt;&gt;&gt;&lt;&lt;&lt;&gt;&gt; ):钥匙 -&gt; 唱片(湖中卡农？)，裙子3.播放唱片 + 换裙子的Rose + 跳舞 + 壁柜上舞步提示 ( &gt;&gt;&gt;&lt;&gt;&lt;&gt;&lt;&lt;&gt;&gt;&gt; ): 唱片碎了 -&gt; 唱针4.唱针 + rose的手:留血的手 1935 Spring第三十三章.Roots1.Rose/Frank/Leonard：三块挂表2.三块挂表放入里屋对应挂表处（Rose：samsara,Leonard:the alchemist brothers,Frank:the crow and the dead man）:时间两点三刻3.时钟 + 两点三刻：牺牲的三人，打开的铁栅栏4.壁画 + 天平上的罐子：密码：535234 (Samuel&gt;5 Mary&gt;3 Ida&gt;5 Emma&gt;2 Albert&gt;3 Rose&gt;4) -&gt; Uncle的心脏 —— 舌头(James) 脚(Leonard) 血液(Rose) 头发(Frank) 眼睛(Samuel) 眼睛(Ida) 牙齿(Mary) 大脑(Albert) 眼泪(Emma) 天平号 5 2 2 3 1 1 3 3 4 重量 1 4 4 3 5 5 3 3 2 5.心脏放上天平 + 点击吸食？每个罐子：重生6.时间不断流逝，Rose抱着新生儿出现在湖面上 附加关卡：家族勋章很简单 附加关卡：William暂时不想写了 整体故事线……搁置]]></content>
      <tags>
        <tag>游戏笔记</tag>
        <tag>Rusty Lake</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[黑旗]]></title>
    <url>%2Fblog%2F2019%2F03%2F25%2Fnotes%2F%E9%BB%91%E6%97%97%2F</url>
    <content type="text"><![CDATA[190319在破船上凿出一个新窟窿 Hahah这一次，华盛顿当局没有出手。延绵数年的武力纷争，让美国极度疲倦，非常厌战。待到奥巴马等人回过神来，极端势力已然坐大。所谓“温和反对派”的策略完全不能控制局势。单靠日复一日的空中打击，根本无力切断极端组织的战略补给线。恐怖组织如此猖獗，甚至已经自行建立“政权”，这样的情况在中东地区已非初次出现。约旦人对此自然非常熟悉，情报部门的人员觉得，美国方面又要开始“在破船上凿出一个新窟窿”了。 190327战争的接口当天晚些时候，主人再次挑起话头，将注意力引向伊拉克。这一次，总统干脆觉得，推翻萨达姆简直犹如天理一般不可逆转，而且有着无上的宗教意义。“先王与家父，都是伟大的父亲。陛下和本人，也都非常虔诚。”阿卜杜拉记得，布什当时来了一番表白，“这一次，我们正可以携起手来，匡扶正义。”…… 关于宗教的力量上万名什叶派信众组织起来，他们从自己栖身的贫民窟出发，一起走向逊尼派聚集的社区。途中，什叶派示威者高喊口号：“打倒复兴党分子！”同时呼吁：“不要美国，不要萨达姆！只要宗教！”正当示威者怒火中烧的时候，美国有线电视新闻网却掐断了现场报道。 扎卡维的战略“运河酒店一案，几乎等于向所有驻伊非政府机构下了逐客令。此后，任何国家都不敢前往巴格达开设外交办事处了。”里德尔这样分析扎卡维的计策，“而且，扎卡维深知什叶派与逊尼派的关系。于是大胆出击，制造纳杰夫惨剧。如此一来，宗派冲突将会不可避免。”“首先，他让美国在伊拉克陷入孤立境地，”里德尔思索着，“然后，他会掀起内战，让我们受困其中。” 190408去复兴党化 Emmmm…萨达姆政权垮台之后，伊拉克国内竟然出现了大规模的治安问题，这一点，确实让美军始料未及。他们未能担起保境安民的责任，倒还可以归为不察之失。相比之下，美军迫不及待地解除了萨达姆军队的武装，还对复兴党分子集体下了党锢令，可算得上一种适得其反的错误。在萨达姆时代，人们都喜欢谋求一份公职，比如学校的校长，或者警察局的头目，又比如情报机关的负责人。成为复兴党的一员，则是谋取这些公职的必要条件。一位青年想要升入大学，也必须先加入复兴党。这样一来，复兴党自然是人丁兴旺。美军对于复兴党人的排斥，让成千上万的技术人员和官僚一夜之间没了工作。接下来，两个棘手问题凸显出来：其一，由于本地的军警人员集体下岗，治安自然无法保证，不法活动愈加猖獗；其二，失去公职、没了俸禄的伊拉克官员心怀怨愤。他们人数众多而且极其容易串联，不满之下，一股逆流渐渐形成。 安拉所有造物之中最为卑怯的那一群在扎卡维看来，美国大兵简直就是“安拉所有造物之中最为卑怯的那一群”，驻伊美军很少外出迎敌，只是缩在自己的基地内。而且，扎卡维还预测，美军很快就会离去。毕竟，美国人的仗总是打不完的。 扎卡维对于伊拉克福特当了几十年的外交官，也见识了不少暴乱局面。他的职业生涯让他相信，任何冲突，都可以通过政治途径得到解决。总有一天，逊尼派与什叶派也会厌倦目前的动荡局面。到那时，他们不再继续杀戮，不再致力于摧毁对方。他们终将坐到谈判桌的两边，谈出一个和平共存的方案。当然，扎卡维可不在此列。他不是伊拉克人，也对和平共存毫无兴趣。他的目标在于撕裂，在于破坏，他要制造一片荒芜，他要破坏伊拉克重建世俗社会的基础。 战争中的死亡死亡，在如今的拉马迪很是稀松平常。就连美国海军陆战队，最近也牺牲了16条军人的性命。而后，美国人仿佛滋生出了一种报复心理。哪怕就是在大白天，他们也会在民居附近发起枪战。有时候，子弹甚至穿堂过屋，打进某户人家的卧室里面。惯骑快车的摩托骑手，常会沦为美军岗哨的活靶子。如果听不懂美国大兵的英语喝令，也可能遭到枪击身亡。拉马迪附近的沙漠当中，更是发生过一起人间惨案——美国军机空袭了一座楼房，45个伊拉克人因此丧生。美方坚信，袭击地点乃是暴乱分子的藏身窝点。可是伊拉克人却觉得，那不过是一处婚礼现场——至少，视频显示，事发之处横七竖八躺了不少女人和孩子。他们都已死去。受害者中，甚至可以看到婴儿的尸身。 关于人弹那些响应扎卡维号召前来投奔的年轻极端分子，往往会被“约旦人”当作执行自杀式任务的炮灰。有时候，他们拼出性命所摧毁的东西，不过时另几条倒霉的无辜生命而已。若论战略价值，几乎等于零。（题外话，引起恐慌不算战略价值吗？）……扎卡维招募自杀“人弹”的举动，本就触犯了宗教禁忌。《古兰经》明文规定伊斯兰教信徒不应轻生。当然，凡事皆有例外。一些宗教学者指出，战场上不屈的斗士结束自己的生命，倒也不能看作违背教义。十几年来，无数的宗教极端分子为了一个问题争辩不休——到底什么人才叫斗士？对于伊斯兰法律体系，扎卡维的理解相当片面。经他阐释过的“教法”，已是极尽疯魔之能事。扎卡维还特地聘请了一批“教法”专家，专职大量批发“斗士”的头衔。任何为他效命的人，都可以通过“斗士”认证。由此而来的结果，是一波自杀式炸弹袭击的高峰。根据学者的统计，这种情况在“圣战”的历史上可谓前所未见。……扎卡维本人也对这种现象有过论述。他觉得，自杀式炸弹袭击乃是他们“武器库中最为致命的一件“。他这件”武器“，可以”在敌人的肌体上划出最深的伤痕“。接着，”约旦人“还无不嘲讽地写道：”自杀式袭击省时省力，执行起来非常简单，而且成本也最为低廉。“……那么，豁出性命的”人弹“，又会得到怎样的回报呢？这个问题，扎卡维在招募录像中也有解答。他给出的好处，无非就是升入”天堂“的保证。]]></content>
      <tags>
        <tag>摘记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[雨夜散记]]></title>
    <url>%2Fblog%2F2018%2F09%2F07%2Fprose%2F%E9%9B%A8%E5%A4%9C%E6%95%A3%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;今天下雨了，下小小雨，不是落下来的大雨，不是飘下来的烟雨，是小小雨，是看不见但最好撑把伞的小小雨。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;晚上便是洗净的夜幕，星辰闪烁，初月低垂。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是不怎么抬头看天的，但在这样的夜晚无意抬头看了，倒也觉得神思自由。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;不晓得你们有没有玩过太宰治的那个游戏，喜剧名词与悲剧名词，可惜下雨称不上喜或悲，大多事物皆如此。悲喜太过主观了，导致大多人在此时都唯心，便如陆九渊说的，宇宙即是吾心，吾心即是宇宙。故游戏的有趣之处是在于可以瞧一瞧对方的心境。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;另有类似的，与友人讨论过主动事物与被动事物。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;说起下雨，我认为是主动的，友人不认同，认下雨是被动的。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;白天是被动的，友人不认同，认白天是主动的。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;但无论如何，我说，地球上能望见的星辰是被动的。这倒是得到了认同。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;远道而来的数年前的星光，在今夜这般无云的夜晚才能被望见。星光是自由的，但无往不在云层的枷锁里。主动变被动，是存在的戏剧性。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;所以，像这样的夜晚，这能被感知的存在，于我是难得的。于是便会产生一股子欲望，告知或存于某处，与我同时望见天上星辰的人，我得告诉他，我们正一同感知数年前的星光的存在，见证时间的智慧，见证宇宙的悠远与宏大，不过那一刻不允许我说此多，我只能问他：“嘿，瞧见了吗”。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这便是神思自由了，若我清醒，我必是现实且悲观的，定会劝诫自己，时间的无涯的荒野里，多的是早一步，或是晚一步，在这恰恰好里，不会有第二人瞧见。若有，便当今日我写了一封情书于她。 所幸我还未很清醒我还可以祷告抛开奥康的剃刀若无人与我一同便请夜晚作证&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;恰恰好从我的床望出去，能看到对面的河，一条白日里能发出呜呜船笛，夜晚能收纳各处的光变亮晶晶的河。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我便借此河祷告，我祷告今日的存在，如宇宙的星光，不掩于岁月，在某年某处的深夜，仍是亮晶晶的模样。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;祷告这事，也是主动事务无疑了。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;另记:提笔次数渐少，偶有记录，也多是以前种种。我常常劝诫自己，昨日精神今日光辉，但昨日事情今日敝屣，所以就算记下了也便搁置角落不看不用了。数月下来竟无甚文字可表。今日于阳台，抬头竟望见许多星星，忽然想起一诗：开帘见新月，即便下阶拜。细语无人闻，北风吹罗带。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;故兴起做此文，想到哪儿遍写到哪儿，形散神散一如既往。]]></content>
      <tags>
        <tag>生活散记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于生活]]></title>
    <url>%2Fblog%2F2018%2F04%2F09%2F%E5%85%B3%E4%BA%8E%E7%94%9F%E6%B4%BB%2F</url>
    <content type="text"><![CDATA[&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;今天翻很久之前看了开头的《查拉图斯特拉如是说》，发现夹在里面的书签是一张单向出的明信片，上面写着Chekhov的一句话 生活自会消化一切，既不要人帮忙，也不要人同意。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这句话我并没有大的感触，毕竟我没看过《游猎惨剧》，而且除了课文之外也没读过Chekhov。只是这句话里，又提到生活二字。生活的希望，生活的热情，生活的磨难……生活二字最近出现在周遭朋友笔下或者嘴里的频次之高，让我误以为所有人的生活才刚刚开始。其实只不过是终于要独自面对生活的一小部分而产生的心情的空泛与空落吧。庆幸的是我不是第一次的独自面对了。而讲起第一次的独自，我大可以用苦难的笔去叙述：&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;那时候我每天都很害怕，一个未成年女性的居所，我不得不担心有人破门或破窗而入，我尝试过无数自我保护的方式：回家检查门窗、空调外机与床底，枕头下放一把刀，睡在柜子里，或是整夜整夜的不睡…你看，多惨。若现在说起原生家庭问题，这样的描述大概会引起大家努力地寻找我现在行为举止中的蛛丝马迹，然后一副同情又了然的样子，看吧，果是有迹可循。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;但事实呢，在那几段漫长的生活中，我的确回家会检查门窗检查床底检查空调外机检查所有的角落，也曾在枕头下放过刀，但比起可怜与害怕，更多的是兴奋与独居基本的防范意识。我也曾睡在柜子里，只不过是因为猎奇心理以及对熟悉的密闭空间的喜爱。更多是整夜整夜的不睡，那同于所有年轻人对自由与健康的无限挥霍。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;若是按我前一种描述，人们往往会向下推测我与父母的关系，而事实上，我从不缺失来自父母的爱意。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;你看，人们大谈生活的希望，但其实就像Chekhov说的，生活自会消化一切，在我没做任何准备，在我还没有意识到生活可能暂时失去希望，或是需要希望的时候，那一切就过去了。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;至于生活以什么方式来消化这一切，就是这最有趣的地方了。我的生活则是把所有可能产生的苦难都消化成了通俗剧里的戏剧性。所以，若要我回看这段经历以及除此之外的所有经历，无论是所谓的碌碌无为或者春光烂漫，都因生活的戏剧性而产生了美感。所以对于生活的一切，我都是满意的。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;因此，对于很多朋友因为生活给人造成的改变，或因为即将独自面对一部分生活而产生的抱怨或是低落与茫然的情绪，我不能很好的安抚你，也不能劝解你，我只能告诉你我的认为，我认为生活不存在希望，亦不存在绝望，这都存在于人的想象；我只能告诉你，我是怎么做的，我是怎么想象生活，想象生活的附带品的，或许可以给你多一种自我开解之道。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;另，最近看两部电影，一部戏梦巴黎，一部行走距离，感叹电影不愧是电影，无论电影是好是坏，都有着大部分生活都没有的戏剧性，还发现我对边缘的人或者情感，总有特殊的喜好。]]></content>
      <tags>
        <tag>生活散记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[查拉图斯特拉如是说]]></title>
    <url>%2Fblog%2F2018%2F03%2F27%2Fnotes%2F%E6%9F%A5%E6%8B%89%E5%9B%BE%E6%96%AF%E7%89%B9%E6%8B%89%E5%A6%82%E6%98%AF%E8%AF%B4%2F</url>
    <content type="text"><![CDATA[我愿意赠送和分发，直到世人中的智者再度乐其愚，贫者再度乐其富。 （?） —— 可是，我的弟兄们，请你们也对我谈谈：你们的肉体在讲到你们的灵魂时说些什么呢？你们的灵魂不就是贫乏，不洁和可怜的安逸吗？ —— 人是联结在动物与超人之间的一根绳索——悬在深渊上的绳索。走过去是危险的，在半当中是危险的，回头看是危险的，战栗而停步是危险的。人之所以伟大，乃在于他是桥梁而不是目的。人之所以可爱，乃在于他是过渡和没落。 —— 从前查拉图斯特拉也曾像一切背后世界论者那样驰骋幻想于世人的彼岸。那时，我觉得世界是一个受尽痛苦和折磨的神的制作品。那时，我觉得世界是一位神的梦和诗；是在一位不满之神的眼前飘荡的彩色的烟。善与恶，乐与悲，我与你——我觉得这些都是在创造主眼前飘荡的彩色的烟。创造主想把视线从他自己身上移开——于是他创造了世界。 —— 瞧，你的任何一种道德都想占有最高的位置：都想要你的全部精神做它的传令使，要获得你的愤怒、仇恨和爱中的全部力量。每一种道德都对他种道德怀着嫉妒，嫉妒是可怕的事。各种道德也会由于嫉妒而趋于毁灭。 —— 你们处死的人，你们应称之为“敌人”，而不该称之为“坏人”；你们应当称之为“病人”，而不该称之为“流氓”；你们应称之为“蠢人”，而不应称之为“罪人”。 —— 我是奔流旁边的栏杆，能抓紧我的人，抓住我吧！可是我不是你们的拐杖。 —— 你还没有自由，你还在追求自由。你的追求使你通宵不寐，过于清醒。你要达到自由的高处，你的灵魂渴慕星空。可是你的不好的本性也渴望自由。你的那些野狗想要自由；如果你的精神企图打开一切的牢门，它们会在地牢里高兴地狂吠。我看，你还是一个妄想自由的囚徒：唉，这种囚徒的灵魂变聪明了，但也变得狡猾和恶劣。精神获得自由的人还必须净化自己。在他的身心里面还留有许多牢狱和霉味：他的眼睛还必须保持纯洁。 ——]]></content>
      <tags>
        <tag>摘记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2018生日记]]></title>
    <url>%2Fblog%2F2018%2F02%2F27%2F2018%E7%94%9F%E6%97%A5%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;今天是我的22岁生月的最后一天，由于我并不过生日，所以这也不是重要的一天。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;倒是应朋友请求给他的朋友发了生日祝福，大概类似于一个非主流的惊喜策划。这种活动与公众场合告白一样，我是顶瞧不起的，但我还是认认真真地编辑了信息，发了过去。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这大概是我长大后最大的变化了。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以往对于这种要求，我是拒绝，还要冷嘲热讽一番，我长大了，对于这种愚蠢的认真也报以宽容。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;前几天看初老症，有一条是心变柔软，对我来说的确是对的，变柔软不至于，倒可以说变宽容了，也可以说变娘娘腔了。说起来也不是坏事。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这几天翻遍了老房子里的书籍笔记，还找到了以前不知何时的u盘，里面还有一篇天使爱美丽的观后感，看到自己一遍遍嘱咐自己，一定要有济世情怀，我以前真是个善良的人，被自己感动。做一个善良的人，这句话真是俗气。善良，现代人似乎不再提起这个词，女人不愿被夸及善良，那经常被等价于无知或是妇人之仁；男人也不愿被夸及善良，多半是忠厚老实却无能；但其实善良与这些并无因果关系，时隔多年，这依旧是我对自己最大的忠告，努力做一个善良的人。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;还找到了以前追求一位男孩时的一个小号，遗憾的是只记下了登陆号，没有密码，故只能进到那个小号的qq空间窥探一下我十几岁时候的少女心事。原来那人在我第三天分享每日开心事宜的时候就已经没理我了，我却还认真的分享了几十天。真是非常有一颗不识时务一意孤行…但勇敢的心了。事实上，如同这位男士的角色，小学初中高中一直都有相应的人，但都没有与其交往，如真要交往，那绝对是非常大的负担，单方面的追求有随时消失的权利，交往没有，被拒绝是最理想的结局。无论如何，从这种事件的重复发生可以见得我是一个非常热情，且享受单方面输出型感情的人。我大学非常空洞，原因之一大概就是我从未追求过谁，导致我失去了大部分热情。anyway…第二个忠告，做一个热情勇敢的人…的确是个出发角度略奇怪的忠告。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在生月的最后一天，除以上的两个忠告外，给自己的另外两个忠告都来自于我的固执与不开化。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其一，由于如今年轻人都高冷矜持，忠告自己别跟他们一样，要保持低俗热情。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其二，由于如今年轻人都装模作样，忠告自己别跟他们一样，并且要及时戳破他们。这似乎看起来有些刻薄，与善良背道而驰，其实不然，只要做到及时善良地戳破他们。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;还找到了一本摘记，发现纪伯伦的7次鄙视自己的灵魂抄了5遍，重摘以忠告。 我曾七次鄙视自己的灵魂本可进取却故作谦卑在瘸子面前跛足而过趋易而从借他人错慰己过把软弱当做坚韧恶人不恶己侧身于生活污泥，虽不甘心却又畏首畏尾 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;好了以上总共11个忠告， &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第12条忠告是，性感由内向外，不必刻意追求。]]></content>
      <tags>
        <tag>生日记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我对生活的误解]]></title>
    <url>%2Fblog%2F2017%2F11%2F05%2F%E6%88%91%E5%AF%B9%E7%94%9F%E6%B4%BB%E7%9A%84%E8%AF%AF%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[一、我常有幻想，对要来的未知的生活抱有新生的幻想，但后来发生的，往往无甚惊喜，甚至常常忘了，这是新的生活。 二、我常轻视他人，没有对学识的追求，没有对广袤世界的好奇，却发现我并不如其对生活及其中琐事的掌握。 三、我常不屑那些趋易畏难的年轻人，觉得做自己擅长但不喜爱的是对自由最大的侮辱，却忘记了，人的自由凭心而定，生活的自由却全屈居在你擅长的领域里，人人爱自由，但人人要生活。 四、我常聊起，独身的自由与感情之所以为美的不确定及不可预测，却在夜里跟自己的灵魂聊骚。 五、我常认为，若清楚地知道对生活的误解，便要积极地改正，但又固执地一条也不想改，恐惧做一个毫无错处的人。 … 十、借他人言, 悲伤时想做诗人，冷漠时想做哲学家，清醒时才真正觉得是个思想上的废人。]]></content>
      <tags>
        <tag>生活散记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于遇见陌生人]]></title>
    <url>%2Fblog%2F2017%2F09%2F17%2F%E5%85%B3%E4%BA%8E%E9%81%87%E8%A7%81%E9%99%8C%E7%94%9F%E4%BA%BA%2F</url>
    <content type="text"><![CDATA[&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;前几天不知爸妈遇到什么，忽然指责我长大后都不爱打招呼了。我仔细想了想，似乎的确是吧。于是今天想谈谈关于这件事。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;爸爸是个充满热情的人，偶尔是神经质的。一次开车回乡下，经过田野，爸爸忽然探出头朝田野那边喊：还在劳动阿。田野那边不知是谁竟也应来一声长长的诶。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我觉得有趣，便也钻出车窗跟着喊，田野里总有有趣的人，因为每次都有人应和回来。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;大约从那时起，我便开始热衷于跟陌生人的交往。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;记得高中时吧，街上还有那种随身背着工具的擦鞋匠。我放学路上会经过大润发，那前面的停车点也有擦鞋匠。有时见天色已晚，我便问他：这么晚了还有人来擦鞋啊，擦亮了也看不清啊。那人便嘿嘿地笑，答说过会儿便回了。偶尔放学的校车晚点了，那人便也会问一句，今儿个怎么这么晚，你妈在家里等心急嘞。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;现在想来，我并不晓得那擦鞋匠的名字，我在每天的放学路上问候了他，他便记住了我。我已经忘了是我毕业后主动消失在他的世界里，还是他摆了别地的摊头，消失在我的世界里。第一次想起这人竟在这多年之后了，奇妙的陌生人。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这么说起来，初中时还有另一位与我联系更深的爷爷。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;那时我住在吉山一带，离我的中学很近，大概800米。可大概就是因为很近，所以不知怎么总是来不及。一次来不及便叫了小区门口的一辆三轮车（那时小区门口还会停一排三轮车，现在已经不多见了。） &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第一次踩三轮车载我的爷爷姓吴，依稀记得那时他的头发已经很白了。我赶不及，叫他快些，问他为什么不跟别些一样偷装个电瓶，还要自己呼哧呼哧地踩。他说装电瓶不安全，而且他老了，电瓶太快，怕踩刹车时反应不过来。我便不催了。后来不知怎么，我每天都坐他的车，路上老吴跟我说过很多，诸如他也住在吉山片区，儿女都在外打拼，常打钱来，但他是闲不住，于是出来踩三轮了。每天聊这800米，我竟觉得很有趣。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一阵妈妈去上海了，每天早上我要自己买早餐，老吴知道了之后便每天给我带两个肉包，总不肯要我钱。其实我那时不吃肉包，以前口叼，总觉得街上的肉包的馅很奇怪，但我还是吃下去了，这肉包太难得了。我是个很爱哭的人，这肉包足够我狠哭一场了，但怕吓到老吴，便悄悄地哭。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;老吴给过我一张卡纸，上面有他的姓名电话，叫我何时要出门都可以叫他，说反正他一个脚踩车不比那些偷装了电瓶的，没什么生意。我把它放在钱包里。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一次去浙北逛街，也叫了三轮车回来，不想把钱包落在车上了，再回浙北门口那排三轮车里去找，那车主估计是拉别的趟去了，等了很久也不见人，很沮丧。第二天上学，路上与老吴说了这事，他细问了我是浙北哪个门口的三轮车，说出车的人去的点一般都是老地方，他去帮我问问。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;隔天老吴竟真的把我的钱包拿了回来，说卡在那三轮车的坐垫边上了，所以大家都没看见。我真不知道该怎么说。老吴真的是个好人。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;后来是我临中考的那个学期，我那时不爱读书，还因为没写寒假作业被勒令回家补完作业才能开学。那时老师觉得我应是考不上任何一所重点中学了，父母也不怎么管我学习，只有老吴，不知道我的学业情况，不知道我每次模拟考的结果，就觉得我应是能上湖中的，语气不是普通的敷衍，是认真的给我打气。可是后来我踩着分数线进了湖中，跟这么多人分享开心，却忘了老吴。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我初中毕业了，没再走上中学那条路了，再后来我又丢失了放着老吴电话的钱包，再后来我搬离了吉山，便再也没有见过了。高中的时候我回吉山去看了看，波德莱尔说：城市的形状变得比人心还快。是了，那小区门口已经大改，那排三轮车移到了另一个街口，但也只看见一两辆了，老吴可能踩趟去了，也可能踩不动不做了。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;与老吴的际遇，原是想起来就让人开心的，但因为我的问题缺失了一个告别式，便不敢多想起了，我真是个忘恩负义的人。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;想是不能再见了，真是遗憾啊。想跟老吴说，我考上湖中了，但没考上好大学，我还是很开心，谢谢你，谢谢你阿，感谢有你。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最近不知道怎么，可能到了秋天，体内的水分无法经由汗液出来，便老是想哭，今天想起老吴，竟在床上默默大哭了一场，哭完也还想哭。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我太不珍惜了，与陌生人的相遇。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;等相遇过后，我又用珍惜的文字去叙述它，像造作的傻子。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我有时想，我现在是否也忽略了理应珍惜的陌生人。细想便觉得恐惧，因为并没有。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我似乎失去了陌生人的爱意，在我失去热情之后。眼前琐碎的一切，仅是琐碎而已。据说大家都会慢慢变成心里藏着热情，但外表冷硬的石头。似乎这才是成熟的人。这更令我恐惧了。我千万不能变成这样的人。因为我还渴望陌生人的爱意。要靠别人的爱生活，就得有可爱之处。所以，热情与我，即便失去了，也得装出来，久了，它便会回来吧。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;祝愿明天起床，大家都是热情的人。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;并与此同时，珍惜身边的事物。]]></content>
      <tags>
        <tag>生活散记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[长痘诗]]></title>
    <url>%2Fblog%2F2017%2F08%2F16%2Fpoems%2F%E9%95%BF%E7%97%98%E8%AF%97%2F</url>
    <content type="text"><![CDATA[我脸上长了一颗痘心里就戳了一个孔我眼角长了一颗痘心里就渗出了水来]]></content>
      <tags>
        <tag>小诗</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[孤独与人不合拍]]></title>
    <url>%2Fblog%2F2017%2F08%2F14%2F%E5%AD%A4%E7%8B%AC%E4%B8%8E%E4%BA%BA%E4%B8%8D%E5%90%88%E6%8B%8D%2F</url>
    <content type="text"><![CDATA[&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最近听到那首歌，一首本身是哀愁的歌，消愁。近些年我已经不听这类歌了。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;换成早些时候，我是顶爱这些孤独的歌，越小众越好，那时我深夜听歌每每都沉溺在词里，沉在悲春伤秋里，觉得自己定定是最孤独的一位。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;后来我发现人人都觉自己是一座孤岛。别人唱孤独，写孤独，人人都觉得那莫不是在说我吧。我隐隐有些不适，凭什么那些人觉得自己是孤独的呢？ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我讨厌世上其他孤独人，让我觉得自己的孤独不值一提，倒甚是热闹。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;再后来是到我看《人间失格》的时候。我听过很多人的观后感，竟有不少的人用了种种事迹证明他们与阿叶同病相怜。如果属实，与他们相比，我的孤独又算得了什么呢。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;直到我看到豆瓣上获赞颇多的一位写出“我就是阿叶啊”这样的评论。我又忽然泄力了。看到人们把里面的句子挑出来一句句贴上自己的标签。我惊觉自己一直以为的孤独，不过是自己跟自己的吵闹，我讨厌自以为孤独的我本人，也讨厌满互联网的”叶藏”。这些人让我显得热闹且幼稚无比，也让太宰治先生的阿叶显得不值一提。在此时，由于我发现自己的孤独是假的，我便觉得大家都是装孤独，大家都觉得自己是林黛玉，所以必须要葬花。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;但我还是不开心，对于大家都装孤独这件事情，我郁结于心。我不明白大家为什么要装孤独，我也不明白自己在孤独什么，也不明白为什么大家在孤独什么。我不明白为什么太宰治在叶藏之后就结束了自己的生命，但现在却活着这么多叶藏。我也不明白孤独的人既然这么多，我们为什么不一起玩。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;走进一家酒吧，找一个落单的人，和他碰一杯，蒋方舟说，若是对他说“世上孤独的人这么多，我看你才是真孤独那一个”，那人便立马露出又喜又惊，靠近又退后的神情。太奇怪了，太奇怪了。我已经失去判断孤独真假的能力，放眼望去，觉得人人都孤独，人人都一脸肃静，或倚立，或呆坐，说话言不达意，嬉笑不见眼底。有几位真开心的，过点了又纷纷散去。平时我是觉不出的，鲁迅先生说：世人的悲欢是不相通的，我只觉得他们吵闹。是了，幸好世人的悲欢都不相通，才显出平日的热闹来。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我才明白，人人都说孤独，他们只说出了一个孤独指派的词语，就像鬼怪不让你说出真相，你想表达孤独宣泄孤独，它便藏起来，你只能去找孤独装作孤独，这便是装孤独的热闹，这便是孤独。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我写到这里，知道自己与本来想写的那首歌已经相去很远，但那也是让人可以找孤独的一首歌，但多了一些洒脱吧。索性是随笔，离题也不要紧，附词共勉。 一杯敬朝阳，一杯敬夕阳。一杯敬故乡，一杯敬远方。一杯敬明天，一杯敬过往。一杯敬自由，一杯敬死亡。]]></content>
      <tags>
        <tag>生活散记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[今夜月下散记]]></title>
    <url>%2Fblog%2F2017%2F07%2F09%2Fprose%2F%E4%BB%8A%E5%A4%9C%E6%9C%88%E4%B8%8B%E6%95%A3%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;来到厦门后，忙于整理新的宿舍，忙于熟悉新的学习氛围与周围的街道商场，日子比起以前，是忙了许多。除了初时的忙碌，倒也没什么别的不适应了，毕竟现代人，对于城市之间的奔走，像是习以为常了。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;熟悉了周围的衣食住行，便像是老市民了。大概对很多人来说，只是去便利店的街道变了走向吧。大家的适应力强得惊人，总不能说不是一件发展的好事吧。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;所幸尚是学员，所以周末也是很空闲的。有时间看看我的新城市。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;厦门的日头很大，势头猛得很，不肯放过任何一个角落，室内的人都把窗帘拉的严实，但光还是从对面大厦的幕墙上折过来，从窗帘的缝隙里死乞白赖地钻进来，倒是让我觉到了这个新城市的热情。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;大概到了傍晚的时候，日头便消了，天空变的蓝蓝紫紫的，又隐约在白白的云朵后面，衬得云朵极美极美。我从未见过这样的云，大朵大朵地连着大地，边界又被后面蓝紫的天勾勒的十分清晰，浑然假象，但偏偏又是真的。我第一次在出租车上见到，便大惊小怪地喜欢上了。但大家似乎司空见惯了？ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上海是没有这样的云的，那儿的天大多是灰蓝的，又隐约有一些像被磨皮了的云。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;福州的天倒是很美，但美在天色，不在云。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;而湖州，我不记得了，在湖州的日子我大多很高兴，从未关心过头顶的景象，但我想，那里应是什么都美的。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;除去云头，尚有夜色可以一说。厦门的夜色没什么美于别处的地方，但夜色本身就很美了。黑黑的也有遥远的美感。若是稍有殊色，我便有更多话要说。今日厦门的夜晚，便是这稍有殊色。风把云吹成东方女人的长发，柔软安静地披散在夜里。别处又藏着许多星辰，与我一起窥探这睡梦中的女人。待到黎明，大家便都悄悄散去。在这夜色里，便没有厦门了，没有此处，也不止我和星辰。人人都在这静谧中藏了爱意，却都留在这里，不带到天明。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;至此我没什么继续写的了。其实我本也无话可说，便写到哪里就是哪里吧。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我睡了，厦门的云和别处的夜晚。]]></content>
      <tags>
        <tag>生活散记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[但我不懂地理]]></title>
    <url>%2Fblog%2F2017%2F07%2F02%2Fpoems%2F%E4%BD%86%E6%88%91%E4%B8%8D%E6%87%82%E5%9C%B0%E7%90%86%2F</url>
    <content type="text"><![CDATA[我爱你像倚于山溪兴奋你奔来又离像走进田地沾了满身的泥像陷入沼泽埋进了未知里像坠在深渊你像风又急又利]]></content>
      <tags>
        <tag>小诗</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2017生日记]]></title>
    <url>%2Fblog%2F2017%2F01%2F27%2F2017%E7%94%9F%E6%97%A5%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[望能永不入屈就大潮望能永不有钦羡意识望能保初心望能留坚韧望回首无过好事无忧望一生丰富穷尽自由]]></content>
      <tags>
        <tag>生日记</tag>
        <tag>小诗</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[你是一只最会奔跑的鸟]]></title>
    <url>%2Fblog%2F2016%2F12%2F26%2Fpoems%2F%E4%BD%A0%E6%98%AF%E4%B8%80%E5%8F%AA%E6%9C%80%E4%BC%9A%E5%A5%94%E8%B7%91%E7%9A%84%E9%B8%9F%2F</url>
    <content type="text"><![CDATA[你是一只最会奔跑的鸟远道而来 气喘吁吁渴求的颤栗的喙我嘉奖你折断你的翅膀兴奋的颤栗的眼睛为你的双足嵌上最昂贵的蹄铁你转身走佝偻的颤栗的鸟影踏夜而归 去路遥遥我是一只难得的鸟]]></content>
      <tags>
        <tag>小诗</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[原谅怯懦]]></title>
    <url>%2Fblog%2F2016%2F12%2F20%2Fpoems%2F%E5%8E%9F%E8%B0%85%E6%80%AF%E6%87%A6%2F</url>
    <content type="text"><![CDATA[我看见今晚要做的梦你邀请我靠近看个仔细我不愿意我晓得我并不梦见你我只会在夜晚奔跑我希望你坐在夜晚的秒针上这暗无边际过得再快一点我看见隔天的早晨你邀请我吃早餐我不愿意我晓得我可能梦见你你让我在夜里不奔跑我知道你不在夜晚的秒针上这也不是真正的黎明]]></content>
      <tags>
        <tag>小诗</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[莫愁]]></title>
    <url>%2Fblog%2F2016%2F02%2F24%2Fpoems%2F%E8%8E%AB%E6%84%81%2F</url>
    <content type="text"><![CDATA[愁前路如何走愁走后如何回头奔赴前已有后忧莫不像原地打转让人昏了头]]></content>
      <tags>
        <tag>小诗</tag>
      </tags>
  </entry>
</search>
